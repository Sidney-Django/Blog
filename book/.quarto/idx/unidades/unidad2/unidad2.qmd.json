{"title":"Módulo 2: Modelos y Bases de Datos.","markdown":{"headingText":"Módulo 2: Modelos y Bases de Datos.","containsRefs":false,"markdown":"\n## Diseño de Modelos en Django\n\nEn este diagrama, se muestra el flujo de diseño de modelos en Django.\n\n``` markdown\n\n         +-----------------------+\n         |                       |\n         | Definir el modelo     |\n         | como una clase        |\n         | Python que hereda de  |\n         | models.Model          |\n         |                       |\n         +----+-------------+----+\n              |             |\n              |             |\n              v             v\n  +-------------------+   +------------------+\n  |                   |   |                  |\n  | Definir campos    |   | Definir métodos  |\n  | y atributos       |   | adicionales      |\n  | del modelo        |   | del modelo       |\n  |                   |   |                  |\n  +--------+----------+   +------+-----------+\n           |                     |\n           |                     |\n           v                     v\n+--------------------+   +--------------------+\n|                    |   |                    |\n| Aplicar migraciones|   | Definir __str__    |\n| para reflejar los  |   | método para        |\n| cambios en la      |   | representación     |\n| base de datos      |   | del modelo         |\n|                    |   |                    |\n+--------------------+   +--------------------+\n```\n\n## 1. Definimos el Modelo.\n\nEn Django, los modelos son la base para diseñar la estructura de la base\nde datos de nuestra aplicación web.\n\nCada modelo representa una tabla en la base de datos y define los campos\nque estarán presentes en dicha tabla.\n\nLos modelos son definidos como clases Python que heredan de\nmodels.Model, lo que permite que Django maneje automáticamente la\ncreación y gestión de la base de datos.\n\n### Creación de un Modelo.\n\nPara crear un modelo en Django, primero definimos una clase Python que\nrepresenta la tabla en la base de datos. Por ejemplo, si deseamos crear\nun modelo para representar las publicaciones en nuestro blog, podemos\ndefinirlo de la siguiente manera:\n\n``` python\nfrom django.db import models\n\nclass Publicacion(models.Model):\n    titulo = models.CharField(max_length=200)\n    contenido = models.TextField()\n    fecha_publicacion = models.DateTimeField()\n```\n\nEn este ejemplo, hemos definido el modelo Publicacion con tres campos:\ntitulo, contenido y fecha_publicacion.\n\nCada campo se representa mediante un atributo de la clase, donde:\n**models.CharField** representa un campo de texto, **models.TextField**\nrepresenta un campo de texto más largo y **models.DateTimeField**\nrepresenta una fecha y hora.\n\n## 2. Definir Métodos del Modelo.\n\nAdemás de los campos, también podemos definir métodos en el modelo para\nrealizar acciones específicas o para dar formato a los datos. Por\nejemplo, podríamos agregar un método que nos devuelva una representación\nmás legible de la publicación:\n\n``` python\nfrom django.db import models\n\nclass Publicacion(models.Model):\n    titulo = models.CharField(max_length=200)\n    contenido = models.TextField()\n    fecha_publicacion = models.DateTimeField()\n\n    def __str__(self):\n        return self.titulo\n```\n\nEn este caso, hemos definido el método **str** que se ejecutará cuando\nnecesitemos obtener una representación de texto del objeto Publicacion.\n\nEn este caso, hemos decidido que la representación será simplemente el\ntítulo de la publicación.\n\nPara poder probar los cambios que hemos realizado vamos a registrar\nnuestro modelo en el archivo **admin.py**\n\n``` python\n#  admin.py\n\nfrom .models import Publicacion\n\nadmin.site.register(Publicacion)\n```\n\n## 3. Aplicar Migraciones.\n\nUna vez que hemos definido nuestro modelo, necesitamos aplicar las\nmigraciones para que los cambios se reflejen en la base de datos.\n\n``` bash\n# Ejecutar en la terminal o consola\npython manage.py makemigrations\npython manage.py migrate\n```\n\nCon estos pasos, hemos diseñado nuestro modelo de Publicaciones en\nDjango y aplicado las migraciones para crear la tabla correspondiente en\nla base de datos. Ahora estamos listos para utilizar nuestro modelo y\nalmacenar datos en la base de datos.\n\nFinalmente creamos un superusuario para acceder a la administración de\nnuestro proyecto.\n\n``` bash\npython manage.py createsuperuser\n```\n\nLlenamos un pequeño formulario que nos pide: nombre de usuario, correo\nelectrónico (no obligatorio), password, repeat again password.\n\nY listo para poder acceder a la administración de nuestro proyecto nos\ndirigimos a la siguiente url <http://127.0.0.1:8000/admin>\n\nDe forma gráfica ingresamos nuestro usuario y contraseña creado.\n\n![](images/ingreso_credenciales.png){fig-align=\"center\"}\n\n## Ejemplo de las clases Publicación y Comentario en Django:\n\n``` python\n# En el archivo models.py de la aplicación \"Publicaciones\"\n\nfrom django.db import models\n\nclass Publicacion(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    pub_date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.title\n\nclass Comentario(models.Model):\n    publicacion = models.ForeignKey(Publicacion, on_delete=models.CASCADE)\n    author = models.CharField(max_length=50)\n    content = models.TextField()\n    pub_date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"Comentario de {self.author} en {self.publicacion}\"\n```\n\nEn este ejemplo, hemos definido dos clases:\n\n**La clase \"Publicacion\":** Representa una publicación en el blog y\ntiene tres campos: **title** (título de la publicación), **content**\n(contenido de la publicación) y **pub_date** (fecha de publicación).\n\nLa fecha de publicación se establece automáticamente utilizando la\nfunción **auto_now_add=True**.\n\nTambién hemos definido un método \"str\" para que al imprimir una\ninstancia de la clase, se muestre el título de la publicación.\n\n**La clase \"Comentario\":** Representa un comentario en una publicación\nde publicacion específica y tiene cuatro campos: **publicacion** (clave\nexterna que se relaciona con la publicacion al que pertenece el\ncomentario), **author** (nombre del autor del comentario), **content**\n(contenido del comentario) y **pub_date** (fecha de publicación del\ncomentario).\n\nAl igual que en la clase **Publicacion**, hemos definido un método \"str\"\npara mostrar información útil al imprimir una instancia de la clase.\n\n![](images/Codigo_models_and_comentarios.png){fig-align=\"center\"}\n\n## Migraciones de la Base de Datos\n\nLas migraciones en Django son una forma de gestionar los cambios en la\nestructura de la base de datos de manera controlada y consistente.\n\nRepresentan los cambios en la estructura de la base de datos en forma de\narchivos Python y se utilizan para crear, modificar o eliminar tablas y\ncampos.\n\nCuando definimos nuestros modelos en Django (como se mostró en el\nejemplo de la clase \"Publicación\" y \"Comentario\"), estamos describiendo\nla estructura de nuestras tablas en la base de datos.\n\nSin embargo, antes de que estos modelos se puedan utilizar, Django\nnecesita traducirlos en el lenguaje específico del motor de base de\ndatos que estamos utilizando (por ejemplo, PostgreSQL, MySQL, SQLite,\netc.).\n\nEs aquí donde entran en juego las migraciones.\n\nCuando creamos o modificamos modelos, Django genera automáticamente\narchivos de migración que contienen instrucciones para aplicar los\ncambios necesarios en la base de datos. Cada migración representa un\npaso en la evolución de la estructura de la base de datos.\n\n**Comandos para crear y aplicar migraciones:**\n\n``` bash\npython manage.py makemigrations\n```\n\nEste comando se utiliza para crear una nueva migración a partir de los\ncambios detectados en los modelos. Cuando ejecutamos este comando,\nDjango analiza los modelos definidos en nuestra aplicación y compara la\nestructura actual con la estructura de la última migración aplicada.\n\nLuego, genera una nueva migración que contiene las instrucciones para\nllevar la base de datos a su estado actual.\n\n``` bash\npython manage.py migrate\n```\n\nUna vez que hemos creado una o varias migraciones, utilizamos este\ncomando para aplicar esas migraciones pendientes y modificar la base de\ndatos de acuerdo con los cambios en los modelos. Django realiza las\noperaciones necesarias en la base de datos para reflejar la estructura\nactual de los modelos definidos en nuestra aplicación.\n\n💡Recuerda: \"Es importante ejecutar estos comandos cada vez que\nrealizamos cambios en los modelos para mantener la coherencia entre la\nestructura de la base de datos y la estructura definida en los modelos,\ngarantizando así la integridad y consistencia de nuestros datos.\"\n\n## Consultas a la Base de Datos con el ORM de Django.\n\nCuando construimos aplicaciones web, a menudo necesitamos interactuar\ncon una base de datos para almacenar y recuperar datos.\n\nDjango facilita esta tarea mediante su **Object-Relational Mapping\n(ORM)**.\n\nPero, **¿Qué es exactamente el ORM y cómo podemos hacer consultas a la\nbase de datos utilizando esta funcionalidad?**\n\n**Object-Relational Mapping (ORM):** Una forma amigable de interactuar\ncon la base de datos.\n\nImagina que tienes una biblioteca y quieres mantener un registro de los\nlibros y sus autores en una base de datos. Tradicionalmente, tendrías\nque escribir consultas SQL para agregar, actualizar o recuperar\ninformación. Sin embargo, con el ORM de Django, puedes utilizar objetos\nde Python para realizar estas tareas sin tener que escribir consultas\nSQL directamente. ¡Es como si el ORM tradujera automáticamente tus\ninteracciones con objetos de Python a instrucciones SQL!\n\n## Ejemplo de Consulta con el ORM de Django\n\nSupongamos que tienes dos modelos en Django: **Publicacion** con los\ncampos **titulo**, **contenido** y **fecha_publicacion**, y\n**Comentario** con los campos **texto** y **fecha_comentario**.\n\nQueremos obtener todas las publicaciones que contengan comentarios y\nmostrar sus títulos, fechas de publicación y la cantidad de comentarios\nque tienen.\n\n``` python\nfrom miapp.models import Publicacion, Comentario\n\n# Realizamos una consulta utilizando el ORM de Django\npublicaciones_con_comentarios = Publicacion.objects.filter(comentario__isnull=False)\n\n# Mostramos los resultados\nfor publicacion in publicaciones_con_comentarios:\n    cantidad_comentarios = Comentario.objects.filter(publicacion=publicacion).count()\n    print(f\"Título: {publicacion.titulo}, Fecha de Publicación: {publicacion.fecha_publicacion}, Comentarios: {cantidad_comentarios}\")\n```\n\nEn este ejemplo, la función filter(comentario\\_\\_isnull=False) nos\npermite obtener todas las publicaciones que tienen comentarios, es\ndecir, filtramos aquellas publicaciones donde el campo **comentario** no\nes nulo.\n\nLuego, utilizamos un bucle for para recorrer los resultados y, para cada\npublicación, realizamos una nueva consulta para contar la cantidad de\ncomentarios asociados a esa publicación utilizando\nComentario.objects.filter(publicacion=publicacion).count().\n\nAsí, podemos mostrar los títulos de las publicaciones, sus fechas de\npublicación y la cantidad de comentarios que tienen.\n\n## Diagrama de Consulta con ORM de Django.\n\n``` markdown\n                      +----------------+\n                      |  Base de Datos |\n                      +----------------+\n                            |\n                            v\n                      +----------------+\n                      |    Modelo     |\n                      |  (Publicacion) |\n                      +----------------+\n                            |\n                            v\n                      +----------------+\n                      |   Consulta    |\n                      |   (filter)    |\n                      +----------------+\n                            |\n                            v\n                      +----------------+\n                      |   Resultado   |\n                      +----------------+\n```\n\nEn este diagrama, el modelo **Publicacion** representa la estructura de\nla tabla en la base de datos.\n\nLa consulta se realiza a través del ORM de Django, que traduce la\ninteracción con el modelo en una consulta SQL y devuelve el resultado.\n\nEl ORM de Django nos permite realizar consultas de una manera más\nlegible y amigable, lo que facilita enormemente el manejo de datos en\nnuestras aplicaciones web.\n\n## Relaciones entre Modelos.\n\n``` markdown\n\n            +--------------------+          +--------------------+\n            |      Publicacion   |          |        Autor       |\n            +--------------------+          +--------------------+\n            | - id               |          | - id               |\n            | - titulo           |          | - nombre           |\n            | - contenido        |          | - correo           |\n            | - autor (foránea)  |          +--------------------+\n            +--------------------+\n                   |\n                   v\n            +--------------------+\n            |     Relación       |\n            |   (Clave Foránea)  |\n            +--------------------+\n                   |\n                   v\n            +--------------------+\n            |      Resultado     |\n            +--------------------+\n```\n\nDjango facilita el establecimiento de relaciones entre modelos mediante\nclaves foráneas y claves primarias.\n\nPor ejemplo,\n\nEn un blog, un modelo **Publicacion** podría tener una clave foránea a\nun modelo **Autor\"**, lo que permitiría relacionar cada publicación con\nsu respectivo **autor**.\n\nAdemás, Django también soporta diferentes tipos de relaciones como Uno a\nUno (por ejemplo, un modelo **Perfil** asociado a un modelo\n**Usuario**), Uno a Muchos (por ejemplo, un modelo **Categoría** que\npuede tener múltiples publicaciones) y Muchos a Muchos (por ejemplo, una\nrelación de **Seguidores** entre usuarios).\n\nEstas relaciones son fundamentales para organizar y acceder a los datos\nde manera estructurada en una aplicación Django.\n\n## Clave Primaria, Clave Foránea y Relaciones entre Modelos en Django.\n\nEn Django, los modelos representan la estructura de las tablas en la\nbase de datos. Cada modelo se define como una clase Python que hereda de\nmodels.Model. Los atributos de la clase representan los campos de la\ntabla, y entre ellos, destacamos las claves primarias y las claves\nforáneas.\n\n## Clave Primaria.\n\nEjemplo:\n\n``` python\nfrom django.db import models\n\nclass Autor(models.Model):\n    nombre = models.CharField(max_length=100)\n    pais = models.CharField(max_length=50)\n\n    def __str__(self):\n        return self.nombre\n```\n\nLa clave primaria es un campo único que identifica de forma exclusiva\ncada registro en una tabla.\n\nPor defecto, Django crea automáticamente un campo id como clave primaria\npara cada modelo, pero también es posible definir una clave primaria\npersonalizada utilizando el atributo **primary_key=True**.\n\nEn este ejemplo, la tabla Autor tendrá una clave primaria id generada\nautomáticamente. La columna id es un campo único que identificará de\nforma única a cada autor en la base de datos.\n\n## Clave Foránea.\n\nEjemplo:\n\n``` python\nfrom django.db import models\n\nclass Libro(models.Model):\n    titulo = models.CharField(max_length=200)\n    autor = models.ForeignKey(Autor, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.titulo\n```\n\nLa clave foránea es un campo que hace referencia a la clave primaria de\notra tabla, estableciendo una relación entre ambas tablas.\n\nEsto indica que el valor del campo de la clave foránea en una tabla debe\ncoincidir con el valor de la clave primaria en la otra tabla.\n\nEn este ejemplo, el modelo Libro tiene un campo autor que es una clave\nforánea que hace referencia al modelo Autor. Cada libro está relacionado\ncon un autor específico, y la opción **on_delete=models.CASCADE** indica\nque si se elimina un autor, todos los libros asociados a ese autor\ntambién se eliminarán automáticamente.\n\n## Relaciones entre Modelos de Django:\n\n**Relación de Uno a Muchos (OneToMany):** Un objeto de un modelo está\nrelacionado con varios objetos de otro modelo.\n\nSe logra utilizando el campo **ForeignKey**.\n\n``` python\nfrom django.contrib.auth.models import User\nfrom django.db import models\n\nclass Publicacion(models.Model):\n    titulo = models.CharField(max_length=100)\n    contenido = models.TextField()\n    autor = models.ForeignKey(User, on_delete=models.CASCADE)\n```\n\n**Relación de Muchos a Muchos (ManyToMany):** Varios objetos de un\nmodelo están relacionados con varios objetos de otro modelo. Se logra\nutilizando el campo ManyToManyField.\n\n``` python\nfrom django.db import models\n\nclass Etiqueta(models.Model):\n    nombre = models.CharField(max_length=50)\n\nclass Producto(models.Model):\n    nombre = models.CharField(max_length=100)\n    etiquetas = models.ManyToManyField(Etiqueta)\n```\n\n**Relación de Uno a Uno (OneToOne):** Un objeto de un modelo está\nrelacionado con exactamente un objeto de otro modelo, y viceversa. Se\nlogra utilizando el campo OneToOneField.\n\n``` python\nfrom django.contrib.auth.models import User\nfrom django.db import models\n\nclass Perfil(models.Model):\n    usuario = models.OneToOneField(User, on_delete=models.CASCADE)\n    fecha_nacimiento = models.DateField()\n```\n\nEstas relaciones nos permiten asociar objetos de diferentes modelos en\nla base de datos, lo que es esencial para construir aplicaciones web más\ncomplejas.\n\nDjango facilita el manejo de estas relaciones, lo que nos permite\ndesarrollar aplicaciones de forma más legible y amigable.\n\nDjango ofrece una potente forma de establecer relaciones entre modelos,\nlo que nos permite diseñar y construir aplicaciones web más complejas y\nricas en datos.\n\nLa elección del tipo de relación dependerá de la lógica de negocio y los\nrequerimientos específicos de la aplicación.\n\n## Ejemplo de Conexión del Proyecto Blog con Bases de Datos\n\nA continuación, se presentará un ejemplo de configuración de Django para\nconectar el proyecto de blog a tres bases de datos diferentes: SQLite,\nMySQL, MongoDB y PostgreSQL.\n\n## **SQLite**:\n\nSQLite es una base de datos incorporada en Django por defecto. No\nrequiere configuración adicional para usarla, ya que Django creará\nautomáticamente un archivo de base de datos SQLite en el directorio del\nproyecto.\n\n``` python\n# En el archivo settings.py del proyecto \"mi_blog\"\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n```\n\n## **MySQL**:\n\nPara conectar la base de datos de MySQL de **forma local en tu\nmáquina**, necesitarás seguir estos pasos:\n\n1.  **Instalar MySQL Server:** Lo primero que necesitas es tener\n    instalado el servidor de MySQL en tu máquina. Puedes descargar la\n    versión correspondiente para tu sistema operativo desde el sitio web\n    oficial de MySQL: <https://dev.mysql.com/downloads/mysql/>\n\n2.  **Configurar el servidor:** Una vez que hayas instalado MySQL, debes\n    configurar el servidor.\n\n    Durante la instalación, se te pedirá establecer una contraseña para\n    el usuario \"root\" que será el administrador del servidor.\n\n    Asegúrate de recordar esta contraseña, ya que la necesitarás más\n    adelante.\n\n3.  **Iniciar el servidor:** Después de instalar y configurar MySQL,\n    debes iniciar el servidor.\n\n    Esto puede variar dependiendo de tu sistema operativo, pero\n    generalmente puedes hacerlo desde la línea de comandos o utilizando\n    un programa específico para administrar servidores de bases de\n    datos.\n\n4.  **Verificar la conexión:** Una vez que el servidor esté en\n    funcionamiento, verifica que puedas conectarte a él.\n\n    Puedes hacerlo desde la línea de comandos utilizando el cliente de\n    MySQL o usando una herramienta de administración como phpMyAdmin.\n\n5.  **Crear una base de datos:** Antes de conectar Django a la base de\n    datos, necesitas crear una base de datos vacía para tu proyecto.\n\n    Puedes hacerlo desde el cliente de MySQL o desde una herramienta de\n    administración.\n\n6.  **Configurar Django para usar MySQL:** Ahora que tienes el servidor\n    de MySQL funcionando y una base de datos creada, puedes configurar\n    Django para que utilice MySQL como base de datos, puedes instalar el\n    cliente de MySQL [MySQL\n    Workbench](https://dev.mysql.com/downloads/workbench/).\n\n    Ahora es necesario instalar el connector entre Django y nuestra base\n    de datos, lo podemos hacer con el gestor de paquetes **pip**\n\n``` bash\npip install mysqlclient\n```\n\n```         \nAhora vamos a configurar Django.\n\nPara hacerlo, modifica el archivo settings.py de tu proyecto Django y ajusta la configuración de la base de datos:\n```\n\n``` python\n# settings.py\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'nombre_de_la_base_de_datos',\n        'USER': 'nombre_de_usuario',\n        'PASSWORD': 'contraseña_del_usuario',\n        'HOST': 'localhost',\n        'PORT': '3306',\n    }\n}\n```\n\nAsegúrate de reemplazar **nombre_de_la_base_de_datos**,\n**nombre_de_usuario** y **contraseña_del_usuario** con los valores\nadecuados para tu configuración de MySQL.\n\n7.  **Realizar migraciones:** Una vez configurada la base de datos en\n    Django, es necesario aplicar las migraciones para crear las tablas y\n    campos correspondientes. Ejecuta el siguiente comando para aplicar\n    las migraciones:\n\n``` bash\npython manage.py migrate\n```\n\n8.  **Verificar la conexión:** Finalmente, verifica que la conexión con\n    la base de datos de MySQL se haya establecido correctamente y que\n    puedas realizar consultas y operaciones desde tu proyecto Django.\n\n    Con estos pasos, tendrás configurada la conexión con la base de\n    datos de MySQL en tu proyecto de Django y podrás utilizarla para\n    almacenar y recuperar datos de forma local en tu máquina.\n\n    |                                             |\n    |---------------------------------------------|\n    | ![](images/paste-1.png){fig-align=\"center\"} |\n    | ![](images/paste-2.png){fig-align=\"center\"} |\n    | ![](images/paste-3.png){fig-align=\"center\"} |\n    | ![](images/paste-4.png){fig-align=\"center\"} |\n\n## **PostgreSQL:**\n\nLo primero que necesitas es instalar PostgreSQL en tu sistema operativo.\n\nPuedes descargar la versión correspondiente para tu sistema desde el\nsitio web oficial de PostgreSQL: <https://www.postgresql.org/download/>\n\n1.  **Configurar PostgreSQL:** Durante la instalación, se te pedirá\n    establecer una contraseña para el usuario \"postgres\" que será el\n    administrador del servidor PostgreSQL. Asegúrate de recordar esta\n    contraseña, ya que la necesitarás más adelante.\n\n2.  **Iniciar el servidor PostgreSQL:** Después de instalar PostgreSQL,\n    debes iniciar el servidor. Esto puede variar dependiendo de tu\n    sistema operativo, pero generalmente puedes hacerlo desde la línea\n    de comandos o utilizando una herramienta específica para administrar\n    servidores de bases de datos.\n\n3.  **Verificar la conexión:** Una vez que el servidor esté en\n    funcionamiento, verifica que puedas conectarte a él. Puedes hacerlo\n    desde la línea de comandos utilizando el cliente psql o usando una\n    herramienta de administración gráfica como pgAdmin.\n\n4.  **Instalar el controlador de PostgreSQL para Django:** Para conectar\n    Django con PostgreSQL, necesitas instalar el controlador psycopg2.\n    Puedes instalarlo utilizando el gestor de paquetes pip:\n\n    ``` bash\n    pip install psycopg2 \n    ```\n\n5.  **Configurar Django para usar PostgreSQL:**\n\n    Modifica el archivo settings.py de tu proyecto Django y ajusta la\n    configuración de la base de datos:\n\n``` python\n# settings.py\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'nombre_de_la_base_de_datos',\n        'USER': 'nombre_de_usuario',\n        'PASSWORD': 'contraseña_del_usuario',\n        'HOST': 'localhost',  # Puedes cambiar esta dirección si PostgreSQL está en otro equipo\n        'PORT': '',          # Por defecto es el puerto 5432\n    }\n}\n```\n\nAsegúrate de reemplazar **nombre_de_la_base_de_datos**,\n**nombre_de_usuario** y **contraseña_del_usuario** con los valores\nadecuados para tu configuración de PostgreSQL.\n\n8.  **Realizar migraciones:**\n\n    Una vez configurada la base de datos en Django, es necesario aplicar\n    las migraciones para crear las tablas y campos correspondientes.\n    Ejecuta el siguiente comando para aplicar las migraciones:\n\n``` bash\npython manage.py migrate \n```\n\n2.  **Verificar la conexión:**\n\nFinalmente, verifica que la conexión con PostgreSQL se haya establecido\ncorrectamente y que puedas realizar consultas y operaciones desde tu\nproyecto Django.\n\nCon estos pasos, tendrás configurada la conexión con PostgreSQL en tu\nproyecto de Django y podrás utilizarla para almacenar y recuperar datos.\n\nPostgreSQL es una base de datos relacional que ofrece características\navanzadas y es ampliamente utilizada en aplicaciones web y proyectos de\ndesarrollo.\n\n|                                              |\n|----------------------------------------------|\n| ![](images/paste-11.png){fig-align=\"center\"} |\n| ![](images/paste-12.png){fig-align=\"center\"} |\n| ![](images/paste-13.png){fig-align=\"center\"} |\n\n## **MongoDB:**\n\n1.  Lo primero que necesitas es instalar **MongoDB** en tu sistema\n    operativo. Puedes descargar la versión correspondiente para tu\n    sistema desde el sitio web oficial de MongoDB:\n    <https://www.mongodb.com/try/download/community>\n\n2.  **Configurar el servidor MongoDB:** Una vez que hayas instalado\n    MongoDB, es necesario configurar el servidor.\n\n    Por defecto, MongoDB se ejecuta en el puerto 27017. Asegúrate de que\n    el servidor MongoDB esté en funcionamiento antes de continuar.\n\n3.  **Instalar el controlador de MongoDB para Django:** Para conectar\n    Django con MongoDB, necesitas instalar el controlador de MongoDB\n    para Django, llamado \"djongo\". Puedes instalarlo utilizando el\n    gestor de paquetes pip:\n\n    ``` bash\n    pip install djongo==1.3.1\n    ```\n\n    Para que todo funcione con normalidad, es necesario incluir el\n    paquete **pymongo**, para ello se sugiere utilizar el siguiente\n    comando.\n\n    ``` bash\n    pip install pymongo==3.12.1\n    ```\n\n4.  **Configurar Django para usar MongoDB:**\n\n    Modifica el archivo settings.py de tu proyecto Django y ajusta la\n    configuración de la base de datos:\n\n``` python\n # settings.py\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'publicaciones',\n    'djongo',\n]\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'djongo',\n        'NAME': 'nombre_de_la_base_de_datos',\n        'CLIENT': {\n            'host': 'localhost', # Cambia esta dirección si tu servidor MongoDB está en otro equipo\n            'port': 27017,       # Puerto de MongoDB (por defecto es 27017)\n        },\n    }\n}\n```\n\nAsegúrate de reemplazar **nombre_de_la_base_de_datos** con el nombre que\ndeseas para tu base de datos MongoDB.\n\n7.  **Realizar migraciones:**\n\nUna vez configurada la base de datos en Django, es necesario aplicar las\nmigraciones para crear las colecciones y documentos correspondientes.\n\nEjecuta el siguiente comando para aplicar las migraciones:\n\n``` bash\npython manage.py makemigrations\npython manage.py migrate \n```\n\n2.  **Verificar la conexión:**\n\nFinalmente, verifica que la conexión con MongoDB se haya establecido\ncorrectamente y que puedas realizar consultas y operaciones desde tu\nproyecto Django.\n\nCon estos pasos, tendrás configurada la conexión con MongoDB en tu\nproyecto de Django y podrás utilizarla para almacenar y recuperar datos.\n\nEs importante mencionar que MongoDB es una base de datos NoSQL, lo que\nsignifica que utiliza un modelo de datos basado en documentos en lugar\nde tablas y filas como las bases de datos relacionales. Esto permite una\nmayor flexibilidad y escalabilidad en el almacenamiento de datos.\n\n|                                              |\n|----------------------------------------------|\n| ![](images/paste-10.png){fig-align=\"center\"} |\n| ![](images/paste-11.png){fig-align=\"center\"} |\n| ![](images/paste-12.png){fig-align=\"center\"} |\n| ![](images/paste-13.png){fig-align=\"center\"} |\n\n# Ejemplo Práctico:\n\n## Diseño de un Modelo de Usuarios y Publicaciones en un Blog.\n\n### Importación de módulos necesarios:\n\nPara definir los modelos en Django, primero importamos los módulos\nnecesarios desde la biblioteca Django.\n\n``` python\n# models.py\n\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db import models\n```\n\n### Definición del modelo \"Usuario\":\n\nEl modelo de \"Usuario\" se crea mediante la herencia de la clase\n\"AbstractUser\" proporcionada por Django. Esto nos permite utilizar la\nfuncionalidad de autenticación y autorización incorporada en Django.\nTambién podemos agregar campos adicionales según sea necesario.\n\n``` python\n# models.py\n\nclass Usuario(AbstractUser):\n    # Agrega campos adicionales si es necesario\n    pass\n```\n\nEn el modelo \"Usuario\", podemos agregar campos adicionales según las\nnecesidades específicas de nuestra aplicación. Al heredar de la clase\n\"AbstractUser\" proporcionada por Django, ya contamos con campos comunes\npara autenticación, como \"username\", \"email\" y \"password\".\n\nAdemás de los campos heredados, algunos ejemplos de campos adicionales\nque podríamos agregar al modelo \"Usuario\" son:\n\n**Nombre completo:** Podemos agregar un campo para almacenar el nombre\ncompleto del usuario.\n\n``` python\nclass Usuario(AbstractUser):\n    # Campos heredados de AbstractUser\n    ...\n\n    # Campo adicional\n    nombre_completo = models.CharField(max_length=255)\n```\n\n**Fecha de nacimiento:** Podemos incluir un campo para registrar la\nfecha de nacimiento del usuario.\n\n``` python\nclass Usuario(AbstractUser):\n    # Campos heredados de AbstractUser\n    ...\n\n    # Campo adicional\n    fecha_nacimiento = models.DateField()\n```\n\n**Biografía:** Podemos permitir que los usuarios agreguen una breve\nbiografía sobre ellos mismos.\n\n``` python\nclass Usuario(AbstractUser):\n    # Campos heredados de AbstractUser\n    ...\n\n    # Campo adicional\n    biografia = models.TextField(blank=True, null=True)\n```\n\n**Imagen de perfil:** Podemos agregar un campo para que los usuarios\ncarguen una imagen de perfil.\n\n``` python\nclass Usuario(AbstractUser):\n    # Campos heredados de AbstractUser\n    ...\n\n    # Campo adicional\n    imagen_perfil = models.ImageField(upload_to='imagenes_perfil/', blank=True, null=True)\n```\n\nEstos son solo algunos ejemplos de los campos adicionales que podríamos\nagregar al modelo \"Usuario\". La elección de los campos depende de los\nrequisitos específicos de la aplicación y qué información adicional\ndeseamos almacenar para nuestros usuarios.\n\nDjango proporciona una amplia variedad de tipos de campos para adaptarse\na diferentes tipos de datos y necesidades.\n\n### Definición del modelo \"Publicacion\":\n\nEl modelo \"Publicacion\" se crea como una subclase de \"models.Model\".\n\nAquí definimos los campos que representarán los atributos de una\npublicación en el blog, como \"titulo\", \"contenido\" y\n\"fecha_publicacion\". Cada campo es una instancia de una clase de campo\nde Django que define el tipo y las propiedades del campo.\n\n``` python\n# models.py\n\nclass Publicacion(models.Model):\n    titulo = models.CharField(max_length=200)\n    contenido = models.TextField()\n    fecha_publicacion = models.DateTimeField()\n```\n\nMétodo \"str\":\n\nEn el modelo \"Publicacion\", hemos definido el método \"str\" que devuelve\nel título de la publicación cuando se imprime una instancia de la clase.\n\nEsto hace que sea más fácil identificar las publicaciones en el\nadministrador de Django y en cualquier otra parte donde se muestren\nobjetos de la clase \"Publicacion\".\n\n``` python\n# models.py\n\nclass Publicacion(models.Model):\n    # Campos de la publicación...\n\n    def __str__(self):\n        return self.titulo\n```\n\nCon estos pasos, hemos definido los modelos \"Usuario\" y \"Publicacion\" en\nDjango. Estos modelos representarán las tablas \"Usuario\" y \"Publicacion\"\nen la base de datos y nos permitirán interactuar con ellos mediante el\nORM de Django.\n\n# Actividad Práctica:\n\n## Agrega un Campo Adicional al Modelo de Publicaciones\n\n[ ] Agrega un Campo Adicional al Modelo de Publicaciones y Realiza la\nMigración Correspondiente\n\n[ ] En el modelo de Publicaciones, agrega un nuevo campo \"imagen\" de\ntipo \"ImageField\".\n\n[ ] Crea una migración para aplicar los cambios al modelo usando el\ncomando\n\n[ ] Aplica la migración a la base de datos.\n\n## Resolución de la Actividad Práctica.\n\n**Paso 1:** Agregar un Campo Adicional al Modelo de Publicaciones\n\nEn el archivo \"models.py\" de la aplicación \"blog\", agregamos un nuevo\ncampo llamado \"imagen\" de tipo \"ImageField\" al modelo \"Publicacion\".\nEsto nos permitirá almacenar imágenes relacionadas con cada publicación.\n\n``` python\n# models.py\n\nfrom django.db import models\n\nclass Publicacion(models.Model):\n    titulo = models.CharField(max_length=200)\n    contenido = models.TextField()\n    fecha_publicacion = models.DateTimeField()\n    imagen = models.ImageField(upload_to='publicaciones/', blank=True, null=True)\n\n    def __str__(self):\n        return self.titulo\n```\n\n**Paso 2:** Crear una Migración para Aplicar los Cambios\n\nDespués de agregar el nuevo campo \"imagen\" al modelo, necesitamos crear\nuna migración para aplicar los cambios a la base de datos. Django nos\nproporciona un comando para generar automáticamente la migración.\n\n``` bash\n# Ejecutar en la terminal o consola\npython manage.py makemigrations\n```\n\n**Paso 3:** Aplicar la Migración a la Base de Datos\n\nUna vez que se ha creado la migración, la aplicamos a la base de datos\ncon el siguiente comando:\n\n``` bash\n# Ejecutar en la terminal o consola\npython manage.py migrate\n```\n\nCon estos pasos, hemos agregado con éxito un campo adicional \"imagen\" al\nmodelo de Publicaciones y hemos aplicado la migración a la base de datos\npara reflejar el cambio. Ahora, cada publicación en el blog tendrá un\ncampo para asociar una imagen, lo que mejorará la experiencia visual\npara los usuarios.\n\n## Extra.\n\nPara poder manejar el modelo de Publicaciones desde la administración de\nDjango, es necesario registrar el modelo en el archivo \"admin.py\" de la\naplicación \"blog\". De esta manera, podremos acceder a las publicaciones\ny administrarlas desde la interfaz de administración de Django.\n\n**Paso 4:** Registro del Modelo en el Administrador de Django\n\nEn el archivo \"admin.py\" de la aplicación \"blog\", registramos el modelo\n\"Publicacion\" para que sea accesible desde la interfaz de\nadministración.\n\n``` python\n# admin.py\n\nfrom django.contrib import admin\nfrom .models import Publicacion\n\nadmin.site.register(Publicacion)\n```\n\nCon este registro, el modelo \"Publicacion\" estará disponible en la\ninterfaz de administración de Django.\n\nAhora, cuando ingreses a la URL \"/admin/\" en tu aplicación, podrás\niniciar sesión como superusuario y ver la sección de \"Publicacions\",\ndonde podrás agregar, editar y eliminar publicaciones desde la interfaz\nde administración.\n\nEsto facilitará el manejo de las publicaciones sin tener que acceder\ndirectamente a la base de datos.\n\n## Conclusión.\n\nCon esto, hemos completado el Módulo 2 de Modelos y Bases de Datos en\nDjango.\n\nHas aprendido a diseñar modelos en Django, realizar migraciones de la\nbase de datos, hacer consultas utilizando el ORM de Django, establecer\nrelaciones entre modelos y usar formularios en Django.\n\nEn el próximo módulo, continuaremos explorando más características de\nDjango, como vistas y plantillas.","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","number-sections":false,"css":["../../css/styles.css"],"output-file":"unidad2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["../../references.bib"],"biblio-style":"apalike","theme":{"dark":"solar"},"number-depth":4},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","toc":true,"output-file":"unidad2.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"block-headings":true,"bibliography":["../../references.bib"],"biblio-style":"apalike","documentclass":"scrreprt","classoption":["onepage","openany"],"papersize":"a4","margin-top":"35mm","margin-left":"30mm","margin-bottom":"30mm","margin-right":"30mm","titlepage-geometry":["top=35mm","bottom=30mm","right=30mm","left=30mm"]},"extensions":{"book":{"selfContainedOutput":true}}},"epub":{"identifier":{"display-name":"ePub","target-format":"epub","base-format":"epub"},"execute":{"fig-width":5,"fig-height":4,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"epub","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":false,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"default-image-extension":"png","html-math-method":"mathml","to":"epub","number-sections":true,"output-file":"unidad2.epub"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"bibliography":["../../references.bib"],"biblio-style":"apalike","belongs-to-collection":"Curso de Python 2023","group-position":0,"creator":"Lcdo. Diego Saavedra Mgtr.","rights":"© Statick | 2023","fig-responsive":true},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf","epub"]}