{"title":"Módulo 3: Vistas y Plantillas.","markdown":{"headingText":"Módulo 3: Vistas y Plantillas.","containsRefs":false,"markdown":"\n## Creación de Vistas en Django\n\nLas vistas en Django son funciones que procesan las solicitudes del\nusuario y devuelven una respuesta HTTP. Cada vista debe recibir una\nsolicitud como argumento y devolver una respuesta.\n\nEjemplo de una vista que muestra un mensaje de bienvenida:\n\n**Paso 1:** En el archivo \"views.py\" de la aplicación \"publicaciones\",\nagrega el código de la vista de bienvenida:\n\n``` python\n# publicaciones/views.py\n\nfrom django.http import HttpResponse\n\ndef vista_bienvenida(request):\n    return HttpResponse(\"¡Bienvenido al blog!\")\n```\n\n**Paso 3:** Configura la URL para la vista en el archivo \"urls.py\" de la\naplicación \"publicaciones\":\n\n``` python\n# publicaciones/urls.py\n\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('bienvenida/', views.vista_bienvenida, name='vista_bienvenida'),\n]\n```\n\n**Paso 4:** Configura la URL de la aplicación **publicaciones** en el\narchivo **urls.py** del proyecto:\n\n``` python\n# blog/urls.py\n\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('publicaciones/', include('publicaciones.urls')), # Agrega esta línea para incluir las URLs de la aplicación \"publicaciones\"\n]\n```\n\n**Paso 5:** Ahora, ejecuta el servidor de desarrollo con el siguiente\ncomando:\n\n``` bash\npython manage.py runserver\n```\n\n**Paso 6:** Abre tu navegador web e ingresa a la siguiente dirección:\n\n<http://127.0.0.1:8000/publicaciones/bienvenida/>\n\nDeberías ver el mensaje \"¡Bienvenido al blog!\" en el navegador.\n\n## Otra forma de generar un Hola Mundo en Django.\n\n**Paso 1:** Creación de la vista en views.py:\n\nEn esta etapa, se crea una vista llamada \"HolaMundoView\" utilizando la\nclase TemplateView. Esta vista simplemente renderiza la plantilla\n\"hola_mundo.html\" que muestra un mensaje \"Hola Mundo!\".\n\n``` python      \n# views.py  \n\nfrom django.shortcuts import render \nfrom django.views.generic import TemplateView  \n\nclass HolaMundoView(TemplateView):     \n    template_name = 'hola_mundo.html' \n```\n**Paso 2:** Configuración de las URLs en urls.py:\n\nEn el archivo urls.py de la aplicación \"publicaciones\", se define la URL\npara la vista \"HolaMundoView\". También se incluyen las URLs de la\naplicación en las URLs globales del proyecto.\n\n``` python\n# urls.py de publicaciones  \n\nfrom django.urls import path \nfrom .views import HolaMundoView  \n\nurlpatterns = [     \n    path('hola_mundo/', HolaMundoView.as_view(), name='hola_mundo'), ] \n```\n**Paso 3**  Creación de la plantilla hola_mundo.html:\n\nLa plantilla \"hola_mundo.html\" es un archivo HTML simple que muestra el\nmensaje \"Hola Mundo!\" en un encabezado h1.\n\n``` html\n      \n<!DOCTYPE html> \n<html> \n<head>     \n<title>Hola Mundo</title> \n</head> \n<body>     \n<h1>Hola Mundo!</h1> \n</body> \n</html> \n```\n\n    \n**Paso 4:** Configuración de las URLs globales del proyecto en urls.py:\n\nEn el archivo urls.py del proyecto principal, se incluye la URL de la aplicación \"publicaciones\" utilizando la función \"include\". Esto\npermitirá acceder a las URLs de la aplicación a través de la URL base \"publicaciones/\".\n\n``` python\n\n# urls.py del proyecto  \nfrom django.contrib import admin \nfrom django.urls import path, include  \n\nurlpatterns = [     \n    path('admin/', admin.site.urls),     \n    path('publicaciones/', include('publicaciones.urls')), \n    ] \n```\n\nCon estos pasos, hemos creado una aplicación simple que muestra el mensaje \"Hola Mundo!\" en la página cuando accedemos a la URL \"publicaciones/hola_mundo/\". Además, hemos configurado la conexión entre las URLs de la aplicación y las URLs globales del proyecto. A partir de aquí, podemos agregar más funcionalidades y vistas a nuestra aplicación utilizando los modelos \"Publicacion\" y \"Comentario\".\n\n## Mostrar Publicaciones y Comentarios\n\nPara mostrar las publicaciones y comentarios agregados en los modelos, primero, asegúrate de que hayas definido correctamente los modelos\n\"Publicacion\" y \"Comentario\" en el archivo models.py de la aplicación \"publicaciones\" como se mostró en ejemplos anteriores.\n\n## Crea una vista para mostrar las publicaciones:\n\nEn el archivo views.py de la aplicación \"publicaciones\", crea una vista\nllamada \"ListaPublicacionesView\" para mostrar todas las publicaciones:\n\n``` python\n# publicaciones/views.py\n\nfrom django.views.generic import ListView\nfrom .models import Publicacion\n\nclass ListaPublicacionesView(ListView):\n    model = Publicacion\n    template_name = 'lista_publicaciones.html'\n    context_object_name = 'publicaciones'\n```\n\nCrea una plantilla para mostrar la lista de publicaciones:\n\nCrea un archivo llamado \"lista_publicaciones.html\" dentro de la carpeta\n\"templates\" de la aplicación \"publicaciones\":\n\n``` html\n<!-- publicaciones/templates/lista_publicaciones.html -->\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Lista de Publicaciones</title>\n</head>\n<body>\n    <h1>Lista de Publicaciones</h1>\n    <ul>\n        {% for publicacion in publicaciones %}\n            <li>{{ publicacion.titulo }}</li>\n            <ul>\n                {% for comentario in publicacion.comentarios.all %}\n                    <li>{{ comentario.texto }}</li>\n                {% endfor %}\n            </ul>\n        {% endfor %}\n    </ul>\n</body>\n</html>\n```\n\nEn este ejemplo, estamos utilizando una estructura de bucles for en la\nplantilla para mostrar las publicaciones y sus comentarios asociados.\n\nConfigura las URLs para mostrar la lista de publicaciones:\n\nEn el archivo urls.py de la aplicación \"publicaciones\", agrega la\nconfiguración para mostrar la lista de publicaciones:\n\n``` python\n# publicaciones/urls.py\n\nfrom django.urls import path\nfrom .views import ListaPublicacionesView\n\nurlpatterns = [\n    path('publicaciones/', ListaPublicacionesView.as_view(), name='lista_publicaciones'),\n]\n```\nActualiza las URLs del proyecto:\n\nEn el archivo urls.py del proyecto \"blog\", actualiza las URLs de la\naplicación \"publicaciones\" para que se muestren en la ruta principal:\n\n``` python\n# blog/urls.py\n\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('publicaciones.urls')),\n]\n```\n\nEjecuta el servidor de desarrollo:\n\nAhora, ejecuta el servidor de desarrollo nuevamente con el siguiente\ncomando:\n\n``` bash\npython manage.py runserver\n```\n\nAccede a la URL <http://localhost:8000/publicaciones/> en tu navegador y\ndeberías ver la lista de publicaciones y sus comentarios asociados.\n\nSi no has agregado publicaciones o comentarios en la base de datos, es\nposible que no veas datos en la lista.\n\n¡Listo! Ahora has configurado el proyecto \"blog\" para mostrar las\npublicaciones y comentarios agregados en los modelos \"Publicacion\" y\n\"Comentario\" utilizando el modelo Template View de Django.\n\n## Sistema de Plantillas de Django (Jinja2)\n\n-   Django utiliza el motor de plantillas Jinja2 para gestionar la\n    presentación de los datos en las vistas.\n\n-   Jinja2 es un poderoso motor de plantillas que permite incrustar\n    código Python y generar HTML de forma dinámica.\n\n-   En el contexto del proyecto \"blog\" que hemos estado desarrollando,\n    el sistema de plantillas de Django se encargará de renderizar las\n    vistas y mostrar las publicaciones con sus comentarios en la\n    plantilla \"lista_publicaciones.html\".\n\n## Conceptos Principales del Sistema de Plantillas de Django:\n\n**Templates:** Los templates son archivos HTML que contienen código\nPython que define cómo se mostrarán los datos en la interfaz de usuario.\n\nEn nuestro caso, el archivo \"lista_publicaciones.html\" será un template\ndonde mostraremos la lista de publicaciones y sus comentarios.\n\n**Contexto:** El contexto es un diccionario de Python que contiene los\ndatos que se van a renderizar en el template.\n\nEn este contexto, proporcionaremos la lista de publicaciones y sus\ncomentarios para que sean mostrados en la plantilla.\n\n**Variables de Plantilla:** En los templates de Django, podemos utilizar\nvariables de plantilla para acceder a los datos proporcionados en el\ncontexto.\n\nPor ejemplo, podemos utilizar la variable publicaciones para acceder a\nla lista de publicaciones y sus comentarios.\n\n**Directivas de Control:** Jinja2 permite utilizar directivas de\ncontrol, como bucles y condicionales, en los templates para generar\ncontenido de forma dinámica.\n\nEsto nos permite iterar sobre la lista de publicaciones y mostrar cada\nuna de ellas con sus comentarios.\n\n## Pasos para Utilizar el Sistema de Plantillas de Django en el Proyecto \"blog\":\n\nPasos para Utilizar el Sistema de Plantillas de Django en el Proyecto \"blog\":\n\n**Paso 1:** Crear el archivo \"lista_publicaciones.html\"\n\nEn el directorio \"templates\" de la aplicación \"publicaciones\", creamos\nel archivo \"lista_publicaciones.html\" donde definiremos la estructura\nHTML y utilizaremos las variables de plantilla para mostrar los datos.\n\n``` html\n<!-- lista_publicaciones.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Lista de Publicaciones</title>\n</head>\n<body>\n    <h1>Lista de Publicaciones</h1>\n    <ul>\n        {% for publicacion in publicaciones %}\n        <li>\n            <h2>{{ publicacion.titulo }}</h2>\n            <p>{{ publicacion.contenido }}</p>\n            <h3>Comentarios:</h3>\n            <ul>\n                {% for comentario in publicacion.comentarios.all %}\n                <li>{{ comentario.texto }}</li>\n                {% endfor %}\n            </ul>\n        </li>\n        {% endfor %}\n    </ul>\n</body>\n</html>\n```\n**Paso 2:** Definir las Vistas\n\nEn el archivo \"views.py\" de la aplicación \"publicaciones\", definimos las vistas que serán responsables de obtener los datos de la base de datos\n(en este caso, las publicaciones y sus comentarios) y pasarlos al template.\n\n``` python\n# views.py\nfrom django.shortcuts import render\nfrom .models import Publicacion\n\ndef lista_publicaciones(request):\n    publicaciones = Publicacion.objects.all()\n    context = {'publicaciones': publicaciones}\n    return render(request, 'lista_publicaciones.html', context)\n```\n**Paso 3:** Utilizar el Contexto\n\nEn las vistas, creamos un contexto que contiene los datos que queremos mostrar en el template. En nuestro caso, el contexto contendrá la lista\nde publicaciones y sus comentarios.\n\n**Paso 4:** Renderizar el Template\n\nFinalmente, en las vistas, utilizamos el método render() para renderizar\nel template \"lista_publicaciones.html\" con el contexto que creamos. Esto\ngenerará el contenido HTML dinámico que mostrará las publicaciones y sus\ncomentarios.\n\n**Paso 5:** Configurar las URLs\n\nEn el archivo \"urls.py\" de la aplicación \"publicaciones\", definimos la\nURL que se utilizará para acceder a la vista que renderiza el template\n\"lista_publicaciones.html\".\n\n``` python\n# urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('lista/', views.lista_publicaciones, name='lista_publicaciones'),\n]\n```\nCon estos pasos, habremos integrado el sistema de plantillas de Django\n(Jinja2) en nuestro proyecto \"blog\" y podremos mostrar de forma dinámica\nlas publicaciones y sus comentarios en la plantilla\n\"lista_publicaciones.html\". Al acceder a la URL \"/lista/\", se mostrará\nla lista de publicaciones con sus comentarios.\n\n# CRUD de Publicaciones\n\n## Crear Publicaciones\n\n**Paso 1:** Crear el formulario de Publicación\n\nEn el archivo \"forms.py\" de la aplicación \"publicaciones\", creamos un formulario para la creación de publicaciones.\n\n``` python\n# forms.py\nfrom django import forms\nfrom .models import Publicacion\n\nclass PublicacionForm(forms.ModelForm):\n    class Meta:\n        model = Publicacion\n        fields = ['titulo', 'contenido', 'autor']\n```\n**Paso 2:** Actualizar el archivo \"views.py\"\n\nEn el archivo \"views.py\" de la aplicación \"publicaciones\", definimos una vista para crear una nueva publicación y renderizar el formulario.\n\n``` python\n# views.py\nfrom django.shortcuts import render, redirect\nfrom .forms import PublicacionForm\n\ndef crear_publicacion(request):\n    if request.method == 'POST':\n        form = PublicacionForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('lista_publicaciones')\n    else:\n        form = PublicacionForm()\n    return render(request, 'crear_publicacion.html', {'form': form})\n```\n**Paso 3:** Crear la plantilla para el formulario de creación\n\nEn el directorio \"templates\" de la aplicación \"publicaciones\", creamos el archivo \"crear_publicacion.html\" que contendrá el formulario de creación de publicaciones.\n\n``` html\n<!-- crear_publicacion.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Crear Publicación</title>\n</head>\n<body>\n    <h1>Crear Nueva Publicación</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Crear</button>\n    </form>\n</body>\n</html>\n```\n**Paso 4:** Configurar las URLs\n\nEn el archivo \"urls.py\" de la aplicación \"publicaciones\", agregamos una URL para la vista de creación de publicaciones.\n\n``` python\n# urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('lista/', views.lista_publicaciones, name='lista_publicaciones'),\n    path('crear/', views.crear_publicacion, name='crear_publicacion'),\n]\n```\n## Leer Publicaciones\n\n**Paso 1:** Actualizar el archivo \"views.py\"\n\nEn el archivo \"views.py\" de la aplicación \"publicaciones\", definimos una vista para mostrar la lista de publicaciones.\n\n``` python\n# views.py\nfrom django.shortcuts import render\nfrom .models import Publicacion\n\ndef lista_publicaciones(request):\n    publicaciones = Publicacion.objects.all()\n    return render(request, 'lista_publicaciones.html', {'publicaciones': publicaciones})\n```\n**Paso 2:** Actualizar el archivo \"lista_publicaciones.html\"\n\nEn la plantilla \"lista_publicaciones.html\", podemos acceder a las publicaciones y mostrarlas en una lista.\n\n``` html\n<!-- lista_publicaciones.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Lista de Publicaciones</title>\n</head>\n<body>\n    <h1>Lista de Publicaciones</h1>\n    <ul>\n        {% for publicacion in publicaciones %}\n        <li>\n            <h2>{{ publicacion.titulo }}</h2>\n            <p>{{ publicacion.contenido }}</p>\n            <h3>Comentarios:</h3>\n            <ul>\n                {% for comentario in publicacion.comentarios.all %}\n                <li>{{ comentario.texto }}</li>\n                {% endfor %}\n            </ul>\n        </li>\n        {% endfor %}\n    </ul>\n</body>\n</html>\n```\n## Actualizar Publicaciones\n\n**Paso 1:** Actualizar el archivo \"views.py\"\n\nEn el archivo \"views.py\" de la aplicación \"publicaciones\", definimos una vista para actualizar una publicación existente.\n\n``` python\n# views.py\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom .forms import PublicacionForm\nfrom .models import Publicacion\n\ndef actualizar_publicacion(request, pk):\n    publicacion = get_object_or_404(Publicacion, pk=pk)\n    if request.method == 'POST':\n        form = PublicacionForm(request.POST, instance=publicacion)\n        if form.is_valid():\n            form.save()\n            return redirect('lista_publicaciones')\n    else:\n        form = PublicacionForm(instance=publicacion)\n    return render(request, 'actualizar_publicacion.html', {'form': form})\n```\n**Paso 2:** Crear la plantilla para el formulario de actualización\n\nEn el directorio \"templates\" de la aplicación \"publicaciones\", creamos el archivo \"actualizar_publicacion.html\" que contendrá el formulario de actualización de publicaciones.\n\n``` html\n<!-- actualizar_publicacion.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Actualizar Publicación</title>\n</head>\n<body>\n    <h1>Actualizar Publicación</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Guardar Cambios</button>\n    </form>\n</body>\n</html>\n```\n**Paso 3:** Configurar las URLs\n\nEn el archivo \"urls.py\" de la aplicación \"publicaciones\", agregamos una URL para la vista de actualización de publicaciones.\n\n``` python\n# urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('lista/', views.lista_publicaciones, name='lista_publicaciones'),\n    path('crear/', views.crear_publicacion, name='crear_publicacion'),\n    path('actualizar/<int:pk>/', views.actualizar_publicacion, name='actualizar_publicacion'),\n]\n```\n## Eliminar Publicaciones\n\n**Paso 1:** Actualizar el archivo \"views.py\"\n\nEn el archivo \"views.py\" de la aplicación \"publicaciones\", definimos una vista para eliminar una publicación existente.\n\n``` python\n# views.py\nfrom django.shortcuts import get_object_or_404, redirect\nfrom .models import Publicacion\n\ndef eliminar_publicacion(request, pk):\n    publicacion = get_object_or_404(Publicacion, pk=pk)\n    if request.method == 'POST':\n        publicacion.delete()\n        return redirect('lista_publicaciones')\n    return render(request, 'eliminar_publicacion.html', {'publicacion': publicacion})\n```\n**Paso 2:** Crear la plantilla para confirmar la eliminación\n\nEn el directorio \"templates\" de la aplicación \"publicaciones\", creamos el archivo \"eliminar_publicacion.html\" que contendrá la confirmación para eliminar la publicación.\n\n``` html\n<!-- eliminar_publicacion.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Eliminar Publicación</title>\n</head>\n<body>\n    <h1>Eliminar Publicación</h1>\n    <p>¿Estás seguro de que deseas eliminar la publicación \"{{ publicacion.titulo }}\"?</p>\n    <form method=\"post\">\n        {% csrf_token %}\n        <button type=\"submit\">Eliminar</button>\n    </form>\n</body>\n</html>\n```\n**Paso 3:** Configurar las URLs\n\nEn el archivo \"urls.py\" de la aplicación \"publicaciones\", agregamos una URL para la vista de eliminación de publicaciones.\n\n``` python\n# urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('lista/', views.lista_publicaciones, name='lista_publicaciones'),\n    path('crear/', views.crear_publicacion, name='crear_publicacion'),\n    path('actualizar/<int:pk>/', views.actualizar_publicacion, name='actualizar_publicacion'),\n    path('eliminar/<int:pk>/', views.eliminar_publicacion, name='eliminar_publicacion'),\n]\n```\n## CRUD de Comentarios\n\nEl CRUD de comentarios sigue un proceso similar al CRUD de publicaciones. A continuación, se describen los pasos para cada operación:\nCrear Comentarios\n\n**Paso 1:** Crear el formulario de Comentario\n\nEn el archivo \"forms.py\" de la aplicación \"publicaciones\", creamos un formulario para la creación de comentarios.\n\n``` python\n# forms.py\nfrom django import forms\nfrom .models import Comentario\n\nclass ComentarioForm(forms.ModelForm):\n    class Meta:\n        model = Comentario\n        fields = ['publicacion', 'autor', 'contenido']\n```\n**Paso 2:** Actualizar el archivo \"views.py\"\n\nEn el archivo \"views.py\" de la aplicación \"publicaciones\", definimos una vista para crear un nuevo comentario y renderizar el formulario.\n\n``` python\n# views.py\nfrom django.shortcuts import render, redirect\nfrom .forms import ComentarioForm\n\ndef crear_comentario(request):\n    if request.method == 'POST':\n        form = ComentarioForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('lista_publicaciones')\n    else:\n        form = ComentarioForm()\n    return render(request, 'crear_comentario.html', {'form': form})\n```\n**Paso 3:** Crear la plantilla para el formulario de creación\n\nEn el directorio \"templates\" de la aplicación \"publicaciones\", creamos el archivo \"crear_comentario.html\" que contendrá el formulario de creación de comentarios.\n\n``` html\n<!-- crear_comentario.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Crear Comentario</title>\n</head>\n<body>\n    <h1>Crear Nuevo Comentario</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Crear</button>\n    </form>\n</body>\n</html>\n```\n**Paso 4:** Configurar las URLs\n\nEn el archivo \"urls.py\" de la aplicación \"publicaciones\", agregamos una URL para la vista de creación de comentarios.\n\n``` python\n# urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('lista/', views.lista_publicaciones, name='lista_publicaciones'),\n    path('crear/', views.crear_publicacion, name='crear_publicacion'),\n    path('actualizar/<int:pk>/', views.actualizar_publicacion, name='actualizar_publicacion'),\n    path('eliminar/<int:pk>/', views.eliminar_publicacion, name='eliminar_publicacion'),\n    path('crear_comentario/', views.crear_comentario, name='crear_comentario'),\n]\n```\n## Leer Comentarios\n\n``Paso 1:`` Actualizar el archivo \"views.py\"\n\nEn el archivo \"views.py\" de la aplicación \"publicaciones\", definimos una vista para mostrar la lista de comentarios.\n\n``` python\n# views.py\nfrom django.shortcuts import render\nfrom .models import Comentario\n\ndef lista_comentarios(request):\n    comentarios = Comentario.objects.all()\n    return render(request, 'lista_comentarios.html', {'comentarios': comentarios})\n```\n**Paso 2:** Actualizar el archivo \"lista_comentarios.html\"\n\nEn la plantilla \"lista_comentarios.html\", podemos acceder a los comentarios y mostrarlos en una lista.\n\n``` html\n<!-- lista_comentarios.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Lista de Comentarios</title>\n</head>\n<body>\n    <h1>Lista de Comentarios</h1>\n    <ul>\n        {% for comentario in comentarios %}\n        <li>\n            <p>Comentario de {{ comentario.autor }} en {{ comentario.publicacion.titulo }}</p>\n            <p>{{ comentario.contenido }}</p>\n        </li>\n        {% endfor %}\n    </ul>\n</body>\n</html>\n```\n**Paso 3:** Configurar las URLs\n\nEn el archivo \"urls.py\" de la aplicación \"publicaciones\", agregamos una URL para la vista de lista de comentarios.\n\n``` python\n# urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('lista/', views.lista_publicaciones, name='lista_publicaciones'),\n    path('crear/', views.crear_publicacion, name='crear_publicacion'),\n    path('actualizar/<int:pk>/', views.actualizar_publicacion, name='actualizar_publicacion'),\n    path('eliminar/<int:pk>/', views.eliminar_publicacion, name='eliminar_publicacion'),\n    path('crear_comentario/', views.crear_comentario, name='crear_comentario'),\n    path('lista_comentarios/', views.lista_comentarios, name='lista_comentarios'),\n]\n```\n## Actualizar Comentarios\n\n**Paso 1:** Actualizar el archivo \"views.py\"\n\nEn el archivo \"views.py\" de la aplicación \"publicaciones\", definimos una vista para actualizar un comentario existente.\n\n``` python\n# views.py\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom .forms import ComentarioForm\nfrom .models import Comentario\n\ndef actualizar_comentario(request, pk):\n    comentario = get_object_or_404(Comentario, pk=pk)\n    if request.method == 'POST':\n        form = ComentarioForm(request.POST, instance=comentario)\n        if form.is_valid():\n            form.save()\n            return redirect('lista_comentarios')\n    else:\n        form = ComentarioForm(instance=comentario)\n    return render(request, 'actualizar_comentario.html', {'form': form})\n```\n**Paso 2:** Crear la plantilla para el formulario de actualización\n\nEn el directorio \"templates\" de la aplicación \"publicaciones\", creamos el archivo \"actualizar_comentario.html\" que contendrá el formulario de actualización de comentarios.\n\n``` html\n<!-- actualizar_comentario.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Actualizar Comentario</title>\n</head>\n<body>\n    <h1>Actualizar Comentario</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Guardar Cambios</button>\n    </form>\n</body>\n</html>\n```\n**Paso 3:** Configurar las URLs\n\nEn el archivo \"urls.py\" de la aplicación \"publicaciones\", agregamos una URL para la vista de actualización de comentarios.\n\n``` python\n# urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('lista/', views.lista_publicaciones, name='lista_publicaciones'),\n    path('crear/', views.crear_publicacion, name='crear_publicacion'),\n    path('actualizar/<int:pk>/', views.actualizar_publicacion, name='actualizar_publicacion'),\n    path('eliminar/<int:pk>/', views.eliminar_publicacion, name='eliminar_publicacion'),\n    path('crear_comentario/', views.crear_comentario, name='crear_comentario'),\n    path('lista_comentarios/', views.lista_comentarios, name='lista_comentarios'),\n    path('actualizar_comentario/<int:pk>/', views.actualizar_comentario, name='actualizar_comentario'),\n]\n```\n## Eliminar Comentarios\n\n**Paso 1:** Actualizar el archivo \"views.py\"\n\nEn el archivo \"views.py\" de la aplicación \"publicaciones\", definimos una vista para eliminar un comentario existente.\n\n``` python\n# views.py\nfrom django.shortcuts import get_object_or_404, redirect\nfrom .models import Comentario\n\ndef eliminar_comentario(request, pk):\n    comentario = get_object_or_404(Comentario, pk=pk)\n    if request.method == 'POST':\n        comentario.delete()\n        return redirect('lista_comentarios')\n    return render(request, 'eliminar_comentario.html', {'comentario': comentario})\n```\n**Paso 2:** Crear la plantilla para confirmar la eliminación\n\nEn el directorio \"templates\" de la aplicación \"publicaciones\", creamos el archivo \"eliminar_comentario.html\" que contendrá la confirmación para eliminar el comentario.\n\n``` html\n<!-- eliminar_comentario.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Eliminar Comentario</title>\n</head>\n<body>\n    <h1>Eliminar Comentario</h1>\n    <p>¿Estás seguro de que deseas eliminar el comentario de \"{{ comentario.autor }}\" en \"{{ comentario.publicacion.titulo }}\"?</p>\n    <form method=\"post\">\n        {% csrf_token %}\n        <button type=\"submit\">Eliminar</button>\n    </form>\n</body>\n</html>\n```\n**Paso 3:** Configurar las URLs\n\nEn el archivo \"urls.py\" de la aplicación \"publicaciones\", agregamos una URL para la vista de eliminación de comentarios.\n\n``` python\n# urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('lista/', views.lista_publicaciones, name='lista_publicaciones'),\n    path('crear/', views.crear_publicacion, name='crear_publicacion'),\n    path('actualizar/<int:pk>/', views.actualizar_publicacion, name='actualizar_publicacion'),\n    path('eliminar/<int:pk>/', views.eliminar_publicacion, name='eliminar_publicacion'),\n    path('crear_comentario/', views.crear_comentario, name='crear_comentario'),\n    path('lista_comentarios/', views.lista_comentarios, name='lista_comentarios'),\n    path('actualizar_comentario/<int:pk>/', views.actualizar_comentario, name='actualizar_comentario'),\n    path('eliminar_comentario/<int:pk>/', views.eliminar_comentario, name='eliminar_comentario'),\n]\n```\n## Migrar y Ejecutar el Servidor\n\n**Paso 1:** Aplicar las migraciones\n\nDespués de agregar los modelos y las vistas, es necesario aplicar las migraciones para crear las tablas correspondientes en la base de datos.\n\nEjecutamos el siguiente comando:\n\n``` bash\npython manage.py makemigrations\npython manage.py migrate\n```\n**Paso 2:** Ejecutar el servidor\n\nFinalmente, para ver nuestro proyecto en funcionamiento, ejecutamos el servidor de desarrollo de Django.\n\nEjecutamos el siguiente comando:\n\n``` bash\npython manage.py runserver\n```\nCon esto, podemos acceder a nuestro sistema CRUD de publicaciones y comentarios en el navegador, utilizando las URLs configuradas en las vistas y templates. \n\nPor ejemplo, \n\n1. Para ver la lista de publicaciones, accedemos a \"/lista/\"\n\n2. Para crear una nueva publicación, accedemos a \"/crear/\". \n\n3. Para ver la lista de comentarios, accedemos a \"/lista_comentarios/\"\n\n4. Para crear un nuevo comentario, accedemos a \"/crear_comentario/\".\n\n# Correcciones\n\n## Integración de Botones.\n\nPara integrar los botones de actualizar y eliminar en la lista de publicaciones y comentarios, necesitamos realizar algunos cambios en las plantillas y en las vistas. \n\nA continuación, describo los pasos necesarios para cada uno:\n\n## Para las Publicaciones:\n\n**Paso 1:** Actualizar \"lista_publicaciones.html\" en el directorio \"templates\" de la aplicación \"publicaciones\". Agregar los enlaces para actualizar y eliminar cada publicación.\n\n``` html\n<!-- lista_publicaciones.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Lista de Publicaciones</title>\n</head>\n<body>\n    <h1>Lista de Publicaciones</h1>\n    <ul>\n        {% for publicacion in publicaciones %}\n        <li>\n            <h2>{{ publicacion.titulo }}</h2>\n            <p>{{ publicacion.contenido }}</p>\n            <a href=\"{% url 'detalle_publicacion' pk=publicacion.pk %}\">Ver detalles</a>\n            <a href=\"{% url 'actualizar_publicacion' pk=publicacion.pk %}\">Actualizar</a>\n            <a href=\"{% url 'eliminar_publicacion' pk=publicacion.pk %}\">Eliminar</a>\n            <ul>\n                {% for comentario in publicacion.comentarios %}\n                <li>{{ comentario.texto }}</li>\n                <a href=\"{% url 'actualizar_comentario' pk=comentario.pk %}\">Actualizar</a>\n                <a href=\"{% url 'eliminar_comentario' pk=comentario.pk %}\">Eliminar</a>\n                {% endfor %}\n            </ul>\n        </li>\n        {% endfor %}\n    </ul>\n</body>\n</html>\n```\nPaso 2: Actualizar \"views.py\" en la aplicación \"publicaciones\". Agregar las vistas para actualizar y eliminar las publicaciones.\n\n``` python\n# views.py\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom .forms import PublicacionForm, ComentarioForm\nfrom .models import Publicacion\n\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom .forms import PublicacionForm, ComentarioForm\nfrom .models import Publicacion, Comentario\n\ndef lista_publicaciones(request):\n    publicaciones = Publicacion.objects.all()\n    return render(request, 'lista_publicaciones.html', {'publicaciones': publicaciones})\n\ndef crear_publicacion(request):\n    if request.method == 'POST':\n        form = PublicacionForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('lista_publicaciones')\n    else:\n        form = PublicacionForm()\n    return render(request, 'crear_publicacion.html', {'form': form})\n\ndef detalle_publicacion(request, pk):\n    publicacion = get_object_or_404(Publicacion, pk=pk)\n    comentarios = Comentario.objects.filter(publicacion=publicacion)\n\n    if request.method == 'POST':\n        comentario_form = ComentarioForm(request.POST)\n        if comentario_form.is_valid():\n            comentario = comentario_form.save(commit=False)\n            comentario.publicacion = publicacion\n            comentario.save()\n            return redirect('detalle_publicacion', pk=pk)\n    else:\n        comentario_form = ComentarioForm()\n\n    context = {\n        'publicacion': publicacion,\n        'comentarios': comentarios,\n        'comentario_form': comentario_form,\n    }\n    return render(request, 'detalle_publicacion.html', context)\n\ndef actualizar_publicacion(request, pk):\n    publicacion = get_object_or_404(Publicacion, pk=pk)\n    if request.method == 'POST':\n        form = PublicacionForm(request.POST, instance=publicacion)\n        if form.is_valid():\n            form.save()\n            return redirect('lista_publicaciones')\n    else:\n        form = PublicacionForm(instance=publicacion)\n    return render(request, 'crear_publicacion.html', {'form': form})\n\ndef eliminar_publicacion(request, pk):\n    publicacion = get_object_or_404(Publicacion, pk=pk)\n    if request.method == 'POST':\n        publicacion.delete()\n        return redirect('lista_publicaciones')\n    return render(request, 'eliminar_publicacion.html', {'publicacion': publicacion})\n```\n**Paso 3:** Actualizar \"urls.py\" en la aplicación \"publicaciones\". Agregar las URLs correspondientes para las vistas de actualizar y eliminar publicaciones.\n\n``` python\n# urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # Rutas de Publicaciones\n    path('lista/', views.lista_publicaciones, name='lista_publicaciones'),\n    path('crear/', views.crear_publicacion, name='crear_publicacion'),\n    path('detalle/<int:pk>/', views.detalle_publicacion, name='detalle_publicacion'),\n    path('actualizar/<int:pk>/', views.actualizar_publicacion, name='actualizar_publicacion'),\n    path('eliminar/<int:pk>/', views.eliminar_publicacion, name='eliminar_publicacion'),\n\n    # Rutas de Comentarios\n    path('<int:pk>/actualizar_comentario/', views.actualizar_comentario, name='actualizar_comentario'),\n    path('<int:pk>/eliminar_comentario/', views.eliminar_comentario, name='eliminar_comentario'),\n]\n```\n## Para los Comentarios:\n\nEl proceso es similar al de las publicaciones, solo que debemos aplicarlo para los comentarios.\n\n**Paso 1:** Actualizar \"lista_publicaciones.html\" en el directorio \"templates\" de la aplicación \"publicaciones\". Agregar los enlaces para actualizar y eliminar cada comentario.\n\n``` html\n<!-- lista_publicaciones.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Lista de Publicaciones</title>\n</head>\n<body>\n    <h1>Lista de Publicaciones</h1>\n    <ul>\n        {% for publicacion in publicaciones %}\n        <li>\n            <h2>{{ publicacion.titulo }}</h2>\n            <p>{{ publicacion.contenido }}</p>\n            <a href=\"{% url 'detalle_publicacion' pk=publicacion.pk %}\">Ver detalles</a>\n            <a href=\"{% url 'actualizar_publicacion' pk=publicacion.pk %}\">Actualizar</a>\n            <a href=\"{% url 'eliminar_publicacion' pk=publicacion.pk %}\">Eliminar</a>\n            <ul>\n                {% for comentario in publicacion.comentarios %}\n                <li>{{ comentario.texto }}</li>\n                <a href=\"{% url 'actualizar_comentario' pk=comentario.pk %}\">Actualizar</a>\n                <a href=\"{% url 'eliminar_comentario' pk=comentario.pk %}\">Eliminar</a>\n                {% endfor %}\n            </ul>\n        </li>\n        {% endfor %}\n    </ul>\n</body>\n</html>\n```\nTambien es necesario la creación de un nuevo template llamado detalle_publicacion.html en el directorio \"templates\" de la aplicación \"publicaciones\". Agregar los enlaces para actualizar y eliminar cada comentario.\n\n``` html\n<!-- detalle_publicacion.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Detalle de Publicación</title>\n</head>\n<body>\n    <h1>{{ publicacion.titulo }}</h1>\n    <p>{{ publicacion.contenido }}</p>\n    <h3>Comentarios:</h3>\n    <ul>\n        {% for comentario in comentarios %}\n        <li>{{ comentario.contenido }}</li>\n        <a href=\"{% url 'actualizar_comentario' comentario.pk %}\">Actualizar Comentario</a>\n        <a href=\"{% url 'eliminar_comentario' comentario.pk %}\">Eliminar Comentario</a>\n        {% endfor %}\n    </ul>\n\n    <a href=\"{% url 'actualizar_publicacion' publicacion.pk %}\">Actualizar Publicación</a>\n    <a href=\"{% url 'eliminar_publicacion' publicacion.pk %}\">Eliminar Publicación</a>\n\n    <!-- Agregar formulario para agregar comentario -->\n    <h3>Agregar Comentario:</h3>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ comentario_form.as_p }}\n        <button type=\"submit\">Enviar Comentario</button>\n    </form>\n</body>\n</html>\n```\n\nY finalmente actualizar el archivo actualizar_comentario.html en el directorio \"templates\" de la aplicación \"publicaciones\". Agregar los enlaces para actualizar y eliminar cada comentario.\n\n``` html\n<!-- actualizar_comentario.html -->\n<!DOCTYPE html>\n<head>\n    <title>Actualizar Comentario</title>\n</head>\n<body>\n    <h1>Actualizar Comentario</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ comentario_form.as_p }}\n        <button type=\"submit\">Guardar Cambios</button>\n    </form>\n</body>\n</html>\n```\n**Paso 2:** Actualizar \"views.py\" en la aplicación \"publicaciones\". Agregar las vistas para actualizar y eliminar los comentarios.\n\n``` python\n# views.py\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom .forms import PublicacionForm, ComentarioForm\nfrom .models import Publicacion, Comentario\n\ndef lista_publicaciones(request):\n    publicaciones = Publicacion.objects.all()\n    return render(request, 'lista_publicaciones.html', {'publicaciones': publicaciones})\n\ndef crear_publicacion(request):\n    # Código existente\n\ndef detalle_publicacion(request, pk):\n    # Código existente\n\ndef actualizar_publicacion(request, pk):\n    # Código existente\n\ndef eliminar_publicacion(request, pk):\n    # Código existente\n\ndef crear_comentario(request):\n    if request.method == 'POST':\n        form = ComentarioForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('lista_publicaciones')\n    else:\n        form = ComentarioForm()\n    return render(request, 'crear_comentario.html', {'form': form})\n\ndef lista_comentarios(request):\n    comentarios = Comentario.objects.all()\n    return render(request, 'lista_comentarios.html', {'comentarios': comentarios})\n\ndef actualizar_comentario(request, pk):\n    comentario = get_object_or_404(Comentario, pk=pk)\n\n    if request.method == 'POST':\n        comentario_form = ComentarioForm(request.POST, instance=comentario)\n        if comentario_form.is_valid():\n            comentario_form.save()\n            return redirect('detalle_publicacion', pk=comentario.publicacion.pk)\n    else:\n        comentario_form = ComentarioForm(instance=comentario)\n\n    context = {\n        'comentario_form': comentario_form,\n    }\n    return render(request, 'actualizar_comentario.html', context)\n\ndef eliminar_comentario(request, pk):\n    comentario = get_object_or_404(Comentario, pk=pk)\n    publicacion_pk = comentario.publicacion.pk\n    comentario.delete()\n    return redirect('detalle_publicacion', pk=publicacion_pk)\n```\n**Paso 3:** Actualizar \"urls.py\" en la aplicación \"publicaciones\". Agregar las URLs correspondientes para las vistas de actualizar y eliminar comentarios.\n\n``` python\n# urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # Rutas de Comentarios\n    path('<int:pk>/actualizar_comentario/', views.actualizar_comentario, name='actualizar_comentario'),\n    path('<int:pk>/eliminar_comentario/', views.eliminar_comentario, name='eliminar_comentario'),\n]\n```\n## Corregir el Modelo\n\nFinalmente para corregir el modelo y hacer que el campo autor herede los datos de **User** de Django, podemos usar un campo **ForeignKey** que apunte al modelo User. \n\nEsto nos permitirá asociar cada publicación y comentario a un usuario específico. Aquí está el código corregido:\n\n``` python\nfrom django.contrib.auth.models import User\nfrom django.db import models\n\nclass Publicacion(models.Model):\n    titulo = models.CharField(max_length=200)\n    contenido = models.TextField()\n    fecha_publicacion = models.DateTimeField(auto_now_add=True)\n    autor = models.ForeignKey(User, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.titulo\n\nclass Comentario(models.Model):\n    publicacion = models.ForeignKey(Publicacion, on_delete=models.CASCADE)\n    autor = models.ForeignKey(User, on_delete=models.CASCADE)\n    contenido = models.TextField()\n    fecha_publicacion = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"Comentario de {self.autor.username} en {self.publicacion.titulo}\"\n```\nEn este código, hemos modificado el campo autor en ambos modelos para que sea un **ForeignKey** que apunta al modelo **User de Django**. \n\nCon esto, cada publicación y comentario estará asociado a un usuario registrado en el sistema. \n\nEl argumento **on_delete=models.CASCADE** en el campo autor de Comentario asegura que si un usuario es eliminado, también se eliminarán todos sus comentarios relacionados, pero ten en cuenta que esto es opcional y depende de la lógica de negocio que desees implementar.\n\n## Backend: Construcción de una API con Django Rest Framework\n\nEn esta sección, dividiremos todo lo que hemos realizado hasta ahora en una API utilizando Django Rest Framework (DRF). Esto nos permitirá exponer nuestros modelos (Publicacion y Comentario) como puntos finales (endpoints) para realizar operaciones CRUD (Crear, Leer, Actualizar y Eliminar) a través de peticiones HTTP.\n\n**Paso 1:** Instalar Django Rest Framework\n\nPrimero, debemos instalar Django Rest Framework en nuestro entorno virtual. Ejecuta el siguiente comando:\n\n``` bash\npip install djangorestframework\n```\n**Paso 2:** Configurar Django Rest Framework en el Proyecto\n\nEn el archivo settings.py del proyecto, agrega 'rest_framework' a la lista de aplicaciones instaladas:\n\n``` python\nINSTALLED_APPS = [\n    # Otras aplicaciones...\n    'rest_framework',\n]\n```\n**Paso 3:** Serializadores\n\nEn DRF, los serializadores se utilizan para convertir nuestros modelos de Django en formatos JSON y viceversa. Vamos a crear los serializadores para los modelos Publicacion y Comentario en un archivo serializers.py dentro de la aplicación publicaciones.\n\n``` python\n# serializers.py\nfrom rest_framework import serializers\nfrom .models import Publicacion, Comentario\n\nclass ComentarioSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Comentario\n        fields = '__all__'\n\nclass PublicacionSerializer(serializers.ModelSerializer):\n    comentarios = ComentarioSerializer(many=True, read_only=True)\n\n    class Meta:\n        model = Publicacion\n        fields = '__all__'\n```\nEn este código, creamos dos serializadores, ComentarioSerializer y PublicacionSerializer, que utilizan el modelo correspondiente y definen los campos que queremos exponer en nuestra API. En el caso de la publicación, utilizamos comentarios para mostrar los comentarios relacionados.\n\n**Paso 4:** Vistas\n\nVamos a modificar nuestras vistas para utilizar los serializadores y convertir nuestros datos en formato JSON. En el archivo views.py de la aplicación publicaciones, actualiza el contenido de las vistas de la siguiente manera:\n\n``` python\n# views.py\nfrom rest_framework import generics\nfrom .models import Publicacion, Comentario\nfrom .serializers import PublicacionSerializer, ComentarioSerializer\n\nclass ListaPublicaciones(generics.ListCreateAPIView):\n    queryset = Publicacion.objects.all()\n    serializer_class = PublicacionSerializer\n\nclass DetallePublicacion(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Publicacion.objects.all()\n    serializer_class = PublicacionSerializer\n\nclass ListaComentarios(generics.ListCreateAPIView):\n    queryset = Comentario.objects.all()\n    serializer_class = ComentarioSerializer\n\nclass DetalleComentario(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Comentario.objects.all()\n    serializer_class = ComentarioSerializer\n```\n**Paso 5:** URLs\n\nAhora, vamos a configurar las URLs de nuestra API en el archivo urls.py de la aplicación publicaciones.\n\n``` python\n# urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('publicaciones/', views.ListaPublicaciones.as_view(), name='lista_publicaciones'),\n    path('publicaciones/<int:pk>/', views.DetallePublicacion.as_view(), name='detalle_publicacion'),\n    path('comentarios/', views.ListaComentarios.as_view(), name='lista_comentarios'),\n    path('comentarios/<int:pk>/', views.DetalleComentario.as_view(), name='detalle_comentario'),\n]\n```\nEn este código, configuramos las URLs de nuestras vistas utilizando las vistas basadas en clases proporcionadas por DRF. Creamos puntos finales (endpoints) para listar, crear, ver, actualizar y eliminar publicaciones y comentarios.\n\n¡Hemos construido una API básica para nuestro proyecto \"Blog\" utilizando Django Rest Framework! \n\nAhora podemos realizar operaciones CRUD a través de las peticiones HTTP en nuestros modelos de Publicacion y Comentario. \n\n## Documentación de las API\n\nPara documentar las API, podemos utilizar la herramienta **drf-yasg**. La información la vamos a obtener de la documentación oficial en el siguiente link\n\n[Documentación de drf-yasg](https://drf-yasg.readthedocs.io/en/stable/readme.html#installation)\n\n**Paso 1:** Instalar drf-yasg\n\nPrimero, debemos instalar drf-yasg en nuestro entorno virtual. Ejecuta el siguiente comando:\n\n``` bash\npip install -U drf-yasg\n```\n**Paso 2:** Configurar drf-yasg en el Proyecto\n\nEn el archivo settings.py del proyecto, agrega 'drf_yasg' a la lista de aplicaciones instaladas:\n\n``` python\nINSTALLED_APPS = [\n    # Otras aplicaciones...\n    'drf_yasg',\n]\n```\n\n**Paso 3:** Configurar drf-yasg en el archivo urls.py\n\nEn el archivo urls.py del proyecto, agrega las siguientes líneas de código:\n\n``` python\n# urls.py\n...\nfrom django.urls import re_path\nfrom rest_framework import permissions\nfrom drf_yasg.views import get_schema_view\nfrom drf_yasg import openapi\n\n...\n\nschema_view = get_schema_view(\n    openapi.Info(\n        title=\"Snippets API\",\n        default_version='v1',\n        description=\"Test description\",\n        terms_of_service=\"https://www.google.com/policies/terms/\",\n        contact=openapi.Contact(email=\"contact@snippets.local\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,\n    permission_classes=(permissions.AllowAny,),\n)\n\nurlpatterns = [\n    path('swagger<format>/', schema_view.without_ui(cache_timeout=0), name='schema-json'),\n    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n    ...\n]\n```\n\n**Paso 4:** Agregar la variable autenticacion_classes.\n\nEn el archivo url.py del proyecto agregar la variable authentication_classes para que no nos pida autenticación para poder ver la documentación de las API.\n\n``` python\n# urls.py\n...\nauthentication_classes = []\n...\n```\n\n**Paso 5:** Ejecutar el servidor\n\nEjecuta el servidor y en el navegador ingresa a http://localhost:8000/swagger o http://localhost:8000/redoc\n\n``` bash\npython manage.py runserver\n```\n\nTambien puedes probar los plugins de VSCode RappidApi Client o Thunder Client para poder ver la documentación de las API desde el editor de código.\n\nEn la siguiente sección, construiremos el frontend para consumir esta API.\n\n# FRONTEND: Herencia de Plantillas con Django.\n\n## Herencia de Plantillas\n\nPara iniciar con el tema de herencia de plantillas de django, es necesario generar un archivo base.html que será nuestra plantilla base para la generación de las demás plantillas.\n\nEn esta plantilla base incluiremos una barra de navegación con accesos a archivos estáticos de **Home**, **Contacto**, **Quienes somos** y **Crear Publicación**.\n\n- Abre el archivo base.html en el directorio templates de tu proyecto.\n\n- Agrega el siguiente código para definir la barra de navegación:\n\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>{% block title %}Mi Blog{% endblock %}</title>\n    <!-- Agregar enlaces a Bootstrap CSS -->\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <nav class=\"navbar navbar-expand navbar-dark bg-dark\">\n        <div class=\"container\">\n            <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Mi Blog</a>\n            <ul class=\"navbar-nav ml-auto\">\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'home' %}\">Home</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'home' %}\">Creditos</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'contacto' %}\">Contacto</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'quienes_somos' %}\">Quienes Somos</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'crear_publicacion' %}\">Crear</a>\n                </li>\n            </ul>\n        </div>\n    </nav>\n\n    <div class=\"container mt-4\">\n        {% block content %}\n        {% endblock %}\n    </div>\n\n    <!-- Agregar enlaces a Bootstrap JS y jQuery -->\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.1/dist/umd/popper.min.js\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>\n```\t\nEn este código, hemos definido una etiqueta <nav> que contiene enlaces <a> para \"Home\", \"Contacto\", \"Quienes Somos\" y \"Crear\". Los enlaces utilizan las etiquetas {% url %} de Django para generar las URLs correspondientes a cada vista.\n\n- En cada plantilla que extienda de base.html, asegúrate de agregar bloques de contenido para el título y el contenido específico de cada página:\n\nPor ejemplo, en la plantilla lista_publicaciones.html:\n\n``` html\n{% extends 'base.html' %}\n\n{% block title %}Lista de Publicaciones{% endblock %}\n\n{% block content %}\n<h1>Lista de Publicaciones</h1>\n<!-- Contenido de la lista de publicaciones -->\n{% endblock %}\n```\nEn la plantilla detalle_publicacion.html:\n``` html\n{% extends 'base.html' %}\n\n{% block title %}Detalle de Publicación{% endblock %}\n\n{% block content %}\n<h1>Detalle de Publicación</h1>\n<!-- Contenido del detalle de la publicación -->\n{% endblock %}\n```\nY así sucesivamente para las demás plantillas que extiendan de base.html.\n\n## Modificación de Views.\n\nVista y URL para la página \"Home\":\n\n``` html\n# views.py\nfrom django.shortcuts import render\n\ndef home_view(request):\n    return render(request, 'home.html')\n\n# urls.py del proyecto\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('home/', views.home_view, name='home'),\n    # otras URLs de tu proyecto\n]\n```\n\n- Vista y URL para la página \"Contacto\":\n\n``` html\n# views.py\nfrom django.shortcuts import render\n\ndef contacto_view(request):\n    return render(request, 'contacto.html')\n\n# urls.py del proyecto\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # otras URLs de tu proyecto\n    path('contacto/', views.contacto_view, name='contacto'),\n]\n```\nVista y URL para la página \"Quienes Somos\":\n\n``` html\n# views.py\nfrom django.shortcuts import render\n\ndef quienes_somos_view(request):\n    return render(request, 'quienes_somos.html')\n\n# urls.py del proyecto\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # otras URLs de tu proyecto\n    path('quienes_somos/', views.quienes_somos_view, name='quienes_somos'),\n]\n```\n- Vista y URL para la página \"Crear\":\n\n``` html\n# views.py\nfrom django.shortcuts import render\n\ndef crear_view(request):\n    return render(request, 'crear.html')\n\n# urls.py del proyecto\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # otras URLs de tu proyecto\n    path('crear/', views.crear_view, name='crear_publicacion'),\n]\n```\n## Bootstrap en base.html\n\nPara incluir Bootstrap en el archivo base.html, debes agregar las etiquetas <link> y <script> necesarias en el <head> del archivo. Asegúrate de que los archivos de estilos y scripts de Bootstrap estén en la ubicación correcta dentro de tu proyecto.\n\nAquí está el código para incluir Bootstrap en el archivo base.html:\n\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>{% block title %}Mi Blog{% endblock %}</title>\n    <!-- Incluir archivos de estilos de Bootstrap -->\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Home</a>\n        <a class=\"navbar-brand\" href=\"{% url 'contacto' %}\">Contacto</a>\n        <a class=\"navbar-brand\" href=\"{% url 'quienes_somos' %}\">Quienes Somos</a>\n        <a class=\"navbar-brand\" href=\"{% url 'crear_publicacion' %}\">Crear</a>\n    </nav>\n    <div class=\"container mt-4\">\n        {% block content %}\n        {% endblock %}\n    </div>\n    <!-- Incluir archivos de scripts de Bootstrap -->\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.0.7/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>\n```\nEste código incluye las hojas de estilos y scripts de Bootstrap desde sus respectivos CDNs (Content Delivery Network). Así no será necesario descargarlos ni alojarlos en tu proyecto. \n\nSi prefieres tener los archivos locales en tu proyecto, simplemente descárgalos desde la página oficial de Bootstrap (https://getbootstrap.com/) y reemplaza las URL del código por las ubicaciones locales de los archivos.\n\nCon esta modificación, tu archivo base.html utilizará Bootstrap y tendrás una barra de navegación con el estilo proporcionado por Bootstrap. Además, cualquier contenido que agregues en los bloques {% block content %} se verá dentro de un contenedor con márgenes en la parte superior, dándole un espaciado agradable al contenido.\n\n## Inclusión de Herencia de Plantillas en las demás plantillas.\n\n1. Template de home.html.\n\n``` html\n{% extends 'base.html' %}\n\n{% block title %}Home - Mi Blog{% endblock %}\n\n{% block content %}\n<h1>Bienvenido a Mi Blog</h1>\n<p>Este es el contenido de la página de inicio.</p>\n{% endblock %}\n```\n2. Template de contacto.html.\n``` html\n{% extends 'base.html' %}\n\n{% block title %}Contacto - Mi Blog{% endblock %}\n\n{% block content %}\n<h1>Contacto</h1>\n<p>Información de contacto y formulario de contacto.</p>\n{% endblock %}\n```\n3. Template de quienes_somos.html.\n\n``` html\n{% extends 'base.html' %}\n\n{% block title %}Quienes Somos - Mi Blog{% endblock %}\n\n{% block content %}\n<h1>Quienes Somos</h1>\n<p>Información sobre nosotros y nuestra historia.</p>\n{% endblock %}\n```\nEn cada uno de estos templates, utilizamos la etiqueta {% extends 'base.html' %} para indicar que estamos heredando el contenido y la estructura del archivo base.html. Luego, en el bloque {% block content %}, agregamos el contenido específico de cada página. \n\nCada template tiene su título personalizado en el bloque {% block title %}.\n\nCuando se acceda a las URLs correspondientes a cada template, se mostrará el contenido específico de cada página dentro del contenedor proporcionado por el archivo base.html, y la barra de navegación con los enlaces a Home, Contacto, Quienes Somos y Crear se mantendrá visible en todas las páginas gracias a la herencia.\n\n## Agregando bootstrap a los templates.\n\nara agregar Bootstrap a las plantillas anteriores, necesitaremos incluir los enlaces a los archivos CSS y JS de Bootstrap en el archivo base.html. Además, podemos utilizar las clases de Bootstrap para mejorar la apariencia de los elementos en cada página.\n\nA continuación, se muestran las plantillas actualizadas con Bootstrap:\n\n1. Template de base.html\n\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>{% block title %}Mi Blog{% endblock %}</title>\n    <!-- Agregar enlaces a Bootstrap CSS -->\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <nav class=\"navbar navbar-expand navbar-dark bg-dark\">\n        <div class=\"container\">\n            <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Mi Blog</a>\n            <ul class=\"navbar-nav ml-auto\">\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'home' %}\">Home</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'contacto' %}\">Contacto</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'quienes_somos' %}\">Quienes Somos</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'crear_publicacion' %}\">Crear</a>\n                </li>\n            </ul>\n        </div>\n    </nav>\n\n    <div class=\"container mt-4\">\n        {% block content %}\n        {% endblock %}\n    </div>\n\n    <!-- Agregar enlaces a Bootstrap JS y jQuery -->\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.1/dist/umd/popper.min.js\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>\n```\n2. Template de home.html.\n\n``` html\n{% extends 'base.html' %}\n\n{% block title %}Home - Mi Blog{% endblock %}\n\n{% block content %}\n<div class=\"jumbotron\">\n    <h1 class=\"display-4\">Bienvenido a Mi Blog</h1>\n    <p class=\"lead\">Este es el contenido de la página de inicio.</p>\n</div>\n{% endblock %}\n```\n3. Template de contacto.html.\n\n``` html\n{% extends 'base.html' %}\n\n{% block title %}Contacto - Mi Blog{% endblock %}\n\n{% block content %}\n<div class=\"row\">\n    <div class=\"col-md-6 mx-auto\">\n        <h1>Contacto</h1>\n        <p>Información de contacto y formulario de contacto.</p>\n    </div>\n</div>\n{% endblock %}\n```\n\n4. Template de quienes_somos.html\n\n``` html\n{% extends 'base.html' %}\n\n{% block title %}Quienes Somos - Mi Blog{% endblock %}\n\n{% block content %}\n<div class=\"container\">\n    <h1>Quienes Somos</h1>\n    <p>Información sobre nosotros y nuestra historia.</p>\n</div>\n{% endblock %}\n```\nEn estas plantillas, hemos utilizado las clases de Bootstrap para dar estilo a los elementos. Por ejemplo, en el archivo base.html, hemos utilizado la clase \"navbar\" para crear la barra de navegación y la clase \"jumbotron\" para resaltar el contenido de la página de inicio. Además, en los templates de contacto.html y quienes_somos.html, hemos utilizado la clase \"container\" para centrar el contenido y la clase \"row\" para crear una fila que contenga el contenido.\n\n# Reactjs\n\n## Frontend con Reactjs\n\nPara crear un proyecto desde cero en ReactJS que consuma los datos de la API creada con Django Rest Framework, sigue estos pasos:\n\n**Paso 1:** Verificar versiones de Node.js y npm.\n\nAntes de comenzar, asegúrate de tener Node.js y npm instalados en tu sistema. Abre la terminal y ejecuta los siguientes comandos para verificar las versiones:\n\n``` bash\nnode -v\nnpm -v\n```\n**Paso 2:** Crear un nuevo proyecto de React\n\nCrea un nuevo proyecto de React utilizando create-react-app. Ejecuta el siguiente comando en la terminal:\n\n``` bash\nnpx create-react-app frontend\n```\nEsto creará una nueva carpeta llamada \"frontend\" con una estructura de proyecto de React preconfigurada.\n\n**Paso 3:** Instalar axios\n\nEn la carpeta \"frontend\", instala la librería axios para realizar peticiones HTTP a la API de Django. Ejecuta el siguiente comando en la terminal:\n\n``` bash\ncd frontend\nnpm install axios\n```\n**Paso 4:** Crear el componente ListaPublicaciones.js\n\nCrea el componente **ListaPublicaciones.js** en la carpeta \"src/components\" con el siguiente contenido:\n\n``` jsx\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst ListaPublicaciones = () => {\n  const [publicaciones, setPublicaciones] = useState([]);\n\n  useEffect(() => {\n    const fetchPublicaciones = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/publicaciones/');\n        setPublicaciones(response.data.results);\n      } catch (error) {\n        console.error('Error al obtener las publicaciones:', error);\n      }\n    };\n\n    fetchPublicaciones();\n  }, []);\n\n  return (\n    <div>\n      <h1>Lista de Publicaciones</h1>\n      <ul>\n        {publicaciones.map((publicacion) => (\n          <li key={publicacion.id}>\n            <h2>{publicacion.titulo}</h2>\n            <p>{publicacion.contenido}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ListaPublicaciones;\n```\n**Paso 5:** Crear el componente CrearPublicacion.js\n\nCrea el componente CrearPublicacion.js en la carpeta \"src/components\" con el siguiente contenido:\n\n``` jsx\nimport React from 'react';\nimport axios from 'axios';\n\nconst CrearPublicacion = () => {\n  const [titulo, setTitulo] = React.useState('');\n  const [contenido, setContenido] = React.useState('');\n\n  // Replace \"1\" with the ID of the author you want to associate with the publicación\n  const autorId = 1;\n\n  const handleCrear = async () => {\n    try {\n      await axios.post('http://localhost:8000/publicaciones/', {\n        titulo,\n        contenido,\n        autor: autorId,\n      });\n      alert('Publicación creada correctamente.');\n      setTitulo('');\n      setContenido('');\n    } catch (error) {\n      console.error('Error al crear la publicación:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Crear Publicación</h1>\n      <label>\n        Título:\n        <input type=\"text\" value={titulo} onChange={(e) => setTitulo(e.target.value)} />\n      </label>\n      <br />\n      <label>\n        Contenido:\n        <textarea value={contenido} onChange={(e) => setContenido(e.target.value)} />\n      </label>\n      <br />\n      <button onClick={handleCrear}>Crear</button>\n    </div>\n  );\n};\n\nexport default CrearPublicacion;\n```\n**Paso 6:** Crear el componente ActualizarPublicacion.js\n\nCrea el componente ActualizarPublicacion.js en la carpeta \"src/components\" con el siguiente contenido:\n\n``` jsx\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst ActualizarPublicacion = () => {\n  const [titulo, setTitulo] = useState('');\n  const [contenido, setContenido] = useState('');\n  const [autor, setAutor] = useState('');\n\n  // Replace \"3\" with the ID of the publicación you want to update\n  const publicacionId = 3;\n\n  useEffect(() => {\n    const fetchPublicacion = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8000/publicaciones/${publicacionId}/`);\n        const { titulo, contenido, autor } = response.data;\n        setTitulo(titulo);\n        setContenido(contenido);\n        setAutor(autor);\n      } catch (error) {\n        console.error('Error al obtener la publicación:', error);\n      }\n    };\n\n    fetchPublicacion();\n  }, [publicacionId]);\n\n  const handleActualizar = async () => {\n    try {\n      await axios.put(`http://localhost:8000/publicaciones/${publicacionId}/`, {\n        titulo,\n        contenido,\n        autor,\n      });\n      alert('Publicación actualizada correctamente.');\n    } catch (error) {\n      console.error('Error al actualizar la publicación:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Actualizar Publicación</h1>\n      <label>\n        Título:\n        <input type=\"text\" value={titulo} onChange={(e) => setTitulo(e.target.value)} />\n      </label>\n      <br />\n      <label>\n        Contenido:\n        <textarea value={contenido} onChange={(e) => setContenido(e.target.value)} />\n      </label>\n      <br />\n      <label>\n        Autor:\n        <input type=\"number\" value={autor} onChange={(e) => setAutor(Number(e.target.value))} />\n      </label>\n      <br />\n      <button onClick={handleActualizar}>Actualizar</button>\n    </div>\n  );\n};\n\nexport default ActualizarPublicacion;\n```\n**Paso 7:** Crear el componente EliminarPublicacion.js\n\nCrea el componente EliminarPublicacion.js en la carpeta \"src/components\" con el siguiente contenido:\n\n``` jsx\nimport React, { useEffect } from 'react';\nimport axios from 'axios';\n\nconst EliminarPublicacion = () => {\n  // Replace \"2\" with the ID of the publicación you want to delete\n  const publicacionId = 2;\n\n  useEffect(() => {\n    const fetchPublicacion = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8000/publicaciones/${publicacionId}/`);\n        const { titulo, contenido, autor } = response.data;\n        console.log('Publicación a eliminar:', { titulo, contenido, autor });\n      } catch (error) {\n        console.error('Error al obtener la publicación:', error);\n      }\n    };\n\n    fetchPublicacion();\n  }, [publicacionId]);\n\n  const handleEliminar = async () => {\n    try {\n      await axios.delete(`http://localhost:8000/publicaciones/${publicacionId}/`);\n      alert('Publicación eliminada correctamente.');\n    } catch (error) {\n      console.error('Error al eliminar la publicación:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Eliminar Publicación</h1>\n      <p>¿Estás seguro de que deseas eliminar esta publicación?</p>\n      <button onClick={handleEliminar}>Eliminar</button>\n    </div>\n  );\n};\n\nexport default EliminarPublicacion;\n```\n**Paso 8:** Crear el componente Home.js\n\nCrea el componente Home.js en la carpeta \"src/components\" con el siguiente contenido:\n\n``` jsx\nimport React from 'react';\n\nconst Home = () => {\n  return (\n    <div>\n      <h1>Bienvenido a la página de inicio</h1>\n    </div>\n  );\n};\n\nexport default Home;\n```\n**Paso 9:** Crear el componente NavBar.js\n\nCrea el componente NavBar.js en la carpeta \"src/components\" con el siguiente contenido:\n\n``` jsx\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NavBar = () => {\n  return (\n    <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n      <div className=\"container\">\n        <Link className=\"navbar-brand\" to=\"/\">Mi Blog</Link>\n        <ul className=\"navbar-nav ml-auto\">\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/\">Home</Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/crear\">Crear</Link>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n```\n**Paso 10:** Actualizar el archivo App.js\n\nActualiza el archivo App.js en la carpeta \"src\" con el siguiente contenido:\n\n``` jsx\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport NavBar from './components/NavBar';\nimport ListaPublicaciones from './components/ListaPublicaciones';\nimport CrearPublicacion from './components/CrearPublicacion';\nimport DetallePublicacion from './components/DetallePublicacion';\nimport ActualizarPublicacion from './components/ActualizarPublicacion';\nimport EliminarPublicacion from './components/EliminarPublicacion';\n\nconst App = () => {\n  return (\n    <Router>\n      <div>\n        <NavBar />\n        <Routes>\n          <Route path=\"/\" element={<ListaPublicaciones />} />\n          <Route path=\"/crear\" element={<CrearPublicacion />} />\n          <Route path=\"/publicaciones/:id\" element={<DetallePublicacion />} />\n          <Route path=\"/publicaciones/:id/actualizar\" element={<ActualizarPublicacion />} />\n          <Route path=\"/publicaciones/:id/eliminar\" element={<EliminarPublicacion />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n```\n**Paso 11:** Estilos CSS con los archivos index.css y App.css\n\nEn una aplicación React, los estilos CSS se aplican a los componentes para mejorar la apariencia y el diseño de la interfaz de usuario. Por defecto, React crea dos archivos para estilos: index.css y App.css.\n\n**index.css:** Este archivo contiene estilos globales que se aplican a toda la aplicación.\n\n**App.css:** Este archivo contiene estilos específicos para el componente principal de la aplicación (en este caso, el componente App.js).\n\nA continuación, se muestra cómo puedes usar estos archivos CSS en tu aplicación React:\n\n### 1. index.css\n\nEn el directorio src, crea un archivo llamado index.css y agrega los estilos globales que deseas aplicar a toda la aplicación. Por ejemplo:\n\n``` css\n/* index.css */\nbody {\n  font-family: Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n```\n### 2. App.css\n\nEn el directorio src, ya deberías tener un archivo llamado App.css. Puedes agregar estilos específicos para el componente App.js aquí. Por ejemplo:\n\n``` css\n/* App.css */\n.header {\n  background-color: #007bff;\n  color: #ffffff;\n  padding: 1rem;\n  text-align: center;\n}\n\n.nav-link {\n  color: #ffffff;\n  text-decoration: none;\n  margin-right: 1rem;\n}\n\n.nav-link:hover {\n  color: #0056b3;\n}\n```\n### 3. Importar los archivos CSS en App.js\n\nEn el componente App.js, importa los archivos CSS para que los estilos se apliquen a la aplicación. Debes importar index.css al principio del archivo src/index.js, y App.css en App.js:\n\n``` jsx\n// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'; // Importar index.css aquí\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n``` jsx\n// src/App.js\nimport React from 'react';\nimport './App.css'; // Importar App.css aquí\n\nfunction App() {\n  // Código de la aplicación\n  return (\n    <div className=\"container\">\n      <header className=\"header\">\n        <nav>\n          <a className=\"nav-link\" href=\"/\">Home</a>\n          <a className=\"nav-link\" href=\"/contacto\">Contacto</a>\n          <a className=\"nav-link\" href=\"/quienes_somos\">Quienes Somos</a>\n          <a className=\"nav-link\" href=\"/crear_publicacion\">Crear</a>\n        </nav>\n      </header>\n      {/* Resto del contenido de la aplicación */}\n    </div>\n  );\n}\n\nexport default App;\n```\nCon esto, tus estilos CSS definidos en index.css se aplicarán a toda la aplicación, y los estilos definidos en App.css se aplicarán específicamente al componente App.js. Recuerda adaptar los estilos a tus necesidades y preferencias.\n\n**Paso 12:** Importar estilos CSS\n\nEn el archivo **index.js** en la carpeta **\"src\"**, importa el archivo **styles.css** para aplicar los estilos personalizados:\n\n``` jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n```\nCon esto, has creado un proyecto de React independiente que consume los datos de la API creada con Django Rest Framework. Puedes ejecutar el proyecto de React con el siguiente comando:\n\n``` bash\nnpm start\n```\nLuego, podrás ver la aplicación en el navegador accediendo a [http://localhost:3000/](http://localhost:3000/). \n\nLos componentes ListaPublicaciones, CrearPublicacion, ActualizarPublicacion y EliminarPublicacion estarán disponibles en sus respectivas rutas y consumirán datos de la API de Django.\n\n## Inconvenientes\n\nEn caso de tener inconvenientes con las peticiones por parte de la aplicacion de React, se debe agregar la siguiente linea en el archivo settings.py de la carpeta \"backend\":\n\n``` python\nCORS_ORIGIN_ALLOW_ALL = True\n```","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","number-sections":false,"css":["../../css/styles.css"],"output-file":"unidad3.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["../../references.bib"],"biblio-style":"apalike","theme":{"dark":"solar"},"number-depth":4},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","toc":true,"output-file":"unidad3.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"block-headings":true,"bibliography":["../../references.bib"],"biblio-style":"apalike","documentclass":"scrreprt","classoption":["onepage","openany"],"papersize":"a4","margin-top":"35mm","margin-left":"30mm","margin-bottom":"30mm","margin-right":"30mm","titlepage-geometry":["top=35mm","bottom=30mm","right=30mm","left=30mm"]},"extensions":{"book":{"selfContainedOutput":true}}},"epub":{"identifier":{"display-name":"ePub","target-format":"epub","base-format":"epub"},"execute":{"fig-width":5,"fig-height":4,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"epub","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":false,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"default-image-extension":"png","html-math-method":"mathml","to":"epub","number-sections":true,"output-file":"unidad3.epub"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"bibliography":["../../references.bib"],"biblio-style":"apalike","belongs-to-collection":"Curso de Python 2023","group-position":0,"creator":"Lcdo. Diego Saavedra Mgtr.","rights":"© Statick | 2023","fig-responsive":true},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf","epub"]}