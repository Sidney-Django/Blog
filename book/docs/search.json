[
  {
    "objectID": "unidades/unidad0/unidad0.html",
    "href": "unidades/unidad0/unidad0.html",
    "title": "Módulo 0: Git/Github",
    "section": "",
    "text": "Ejercicio práctico:"
  },
  {
    "objectID": "unidades/unidad0/unidad0.html#introducción-a-git-y-control-de-versiones.",
    "href": "unidades/unidad0/unidad0.html#introducción-a-git-y-control-de-versiones.",
    "title": "Módulo 0: Git/Github",
    "section": "Introducción a Git y Control de Versiones.",
    "text": "Introducción a Git y Control de Versiones.\nGit es un sistema de control de versiones distribuido que permite rastrear cambios en el código de forma eficiente.\nEl control de versiones es esencial para mantener un historial de los cambios realizados en un proyecto y facilitar la colaboración en equipo."
  },
  {
    "objectID": "unidades/unidad0/unidad0.html#configuración-de-un-repositorio-en-github",
    "href": "unidades/unidad0/unidad0.html#configuración-de-un-repositorio-en-github",
    "title": "Módulo 0: Git/Github",
    "section": "Configuración de un Repositorio en GitHub",
    "text": "Configuración de un Repositorio en GitHub\nGitHub es una plataforma de alojamiento de repositorios Git en la nube.\nCrea una cuenta en GitHub si no tienes una.\nPara configurar un nuevo repositorio en GitHub, sigue las instrucciones en la página web."
  },
  {
    "objectID": "unidades/unidad0/unidad0.html#uso-básico-de-comandos-de-git.",
    "href": "unidades/unidad0/unidad0.html#uso-básico-de-comandos-de-git.",
    "title": "Módulo 0: Git/Github",
    "section": "Uso Básico de Comandos de Git.",
    "text": "Uso Básico de Comandos de Git.\nFlujo básico de git.\n\nEn la imágen anterior se describe el proceso básico para pasar de Local a Stage, de Stage a Commit y de Commit a Github y/o Cloud.\nClonar un repositorio existente desde GitHub a tu máquina local:\ngit clone url_repositorio\nCrear una nueva rama para trabajar en una funcionalidad específica:\ngit checkout -b nombre_rama\nHacer commits para guardar los cambios realizados:\ngit add archivo_modificado.py\ngit commit -m \"Mensaje del commit\"\nFusionar Ramas y Resolución de Conflictos\nCambiar a la rama principal:\ngit checkout main\nFusionar una rama con la rama principal:\ngit merge nombre_rama\nResolver conflictos que puedan surgir durante la fusión."
  },
  {
    "objectID": "unidades/unidad0/unidad0.html#colaboración-en-un-proyecto-utilizando-github",
    "href": "unidades/unidad0/unidad0.html#colaboración-en-un-proyecto-utilizando-github",
    "title": "Módulo 0: Git/Github",
    "section": "Colaboración en un Proyecto Utilizando GitHub",
    "text": "Colaboración en un Proyecto Utilizando GitHub\nPara colaborar en un proyecto en GitHub, realiza lo siguiente:\nHaz un Fork del repositorio original en tu cuenta de GitHub.\nClona tu Fork a tu máquina local.\nCrea una nueva rama para realizar tus cambios.\nHace commits en tu rama.\nEnvía un Pull Request al repositorio original para que los colaboradores revisen tus cambios y los fusionen."
  },
  {
    "objectID": "unidades/unidad0/unidad0.html#configurar-un-repositorio-y-realizar-cambios",
    "href": "unidades/unidad0/unidad0.html#configurar-un-repositorio-y-realizar-cambios",
    "title": "Módulo 0: Git/Github",
    "section": "Configurar un Repositorio y Realizar Cambios",
    "text": "Configurar un Repositorio y Realizar Cambios\n\nCrea un nuevo repositorio en GitHub.\nClona el repositorio a tu máquina local con el comando git clone url_repositorio.\nCrea una nueva rama con el comando git checkout -b nombre_rama.\nRealiza cambios en tus archivos y haz commits con git add y git commit.\nCambia a la rama principal con git checkout main.\nFusiona tu rama con la rama principal con git merge nombre_rama.\nEnvía tus cambios al repositorio en GitHub con git push origin main.\n\n¡Excelente! Ahora has aprendido los conceptos básicos de Git y GitHub, así como cómo configurar un repositorio y colaborar en un proyecto utilizando esta plataforma. En los próximos módulos, abordaremos el desarrollo web con Django."
  },
  {
    "objectID": "unidades/unidad0/unidad0.html#resolución-del-ejercicio-práctico",
    "href": "unidades/unidad0/unidad0.html#resolución-del-ejercicio-práctico",
    "title": "Módulo 0: Git/Github",
    "section": "Resolución del Ejercicio Práctico",
    "text": "Resolución del Ejercicio Práctico\nConfigurar un Repositorio y Realizar Cambios en el Proyecto Blog\nEn este ejercicio, configuraremos un repositorio Git para el proyecto del blog que vamos a dearrollar en los módulos 1 al 4. Luego, haremos algunos cambios en el proyecto y realizaremos commits para registrar esos cambios en el historial de versiones.\nPaso 1: Configurar el repositorio en GitHub\nAbre tu cuenta de GitHub y haz clic en el botón “New” para crear un nuevo repositorio.\nAsigna un nombre al repositorio y configura la visibilidad como desees.\nOpcionalmente, puedes agregar una descripción y una licencia.\nHaz clic en “Create repository” para crear el repositorio en GitHub.\nPaso 2: Clonar el repositorio en tu máquina local\nCopia la URL del repositorio que acabas de crear en GitHub (se verá como https://github.com/tu_usuario/nombre_repositorio.git).\nAbre una terminal o línea de comandos en la carpeta donde deseas clonar el repositorio.\nUtiliza el siguiente comando para clonar el repositorio en tu máquina local:\ngit clone url_repositorio\nReemplaza “url_repositorio” con la URL que copiaste en el paso 1.\nPaso 3: Realizar cambios en el proyecto del blog\nAbre el proyecto del blog en tu editor de código o IDE favorito.\nRealiza algunos cambios en los archivos de tu proyecto, como agregar nuevas funcionalidades, modificar plantillas o corregir errores.\nPaso 4: Hacer commits para registrar los cambios\nDespués de hacer cambios en el proyecto, utiliza los siguientes comandos para hacer commit y registrar esos cambios en el historial de versiones:\ngit add .\ngit commit -m \"Mensaje descriptivo del commit\"\nEl comando git add . agrega todos los cambios realizados en los archivos del proyecto al área de preparación, y el comando git commit -m “Mensaje” crea un nuevo commit con un mensaje descriptivo para los cambios realizados.\nPaso 5: Enviar los cambios al repositorio en GitHub\nDespués de hacer commit de los cambios en tu repositorio local, utiliza el siguiente comando para enviar los cambios al repositorio en GitHub:\ngit push origin main` \nReemplaza “main” con el nombre de la rama principal de tu proyecto si utilizas otro nombre diferente.\n¡Felicitaciones! Ahora has configurado un repositorio Git para tu proyecto y has realizado cambios en el proyecto, registrando esos cambios mediante commits.\nLos cambios ahora están disponibles en el repositorio en GitHub. Puedes repetir estos pasos cada vez que desees realizar cambios en el proyecto y mantener un historial de versiones de tu proyecto en GitHub."
  },
  {
    "objectID": "about.html#nuestro-objetivo",
    "href": "about.html#nuestro-objetivo",
    "title": "Acerca de Nosotros",
    "section": "Nuestro Objetivo",
    "text": "Nuestro Objetivo\nNuestro objetivo es proporcionarte los conocimientos y las habilidades necesarias para comenzar a programar utilizando Python. Queremos que te sientas cómodo con los conceptos básicos y que estés preparado para abordar proyectos más desafiantes en el futuro."
  },
  {
    "objectID": "about.html#nuestro-equipo",
    "href": "about.html#nuestro-equipo",
    "title": "Acerca de Nosotros",
    "section": "Nuestro Equipo",
    "text": "Nuestro Equipo\nNuestro equipo está formado por apasionados desarrolladores y educadores que tienen una amplia experiencia en el mundo de la programación. Estamos aquí para ayudarte en cada paso del camino y responder a tus preguntas."
  },
  {
    "objectID": "about.html#contacto",
    "href": "about.html#contacto",
    "title": "Acerca de Nosotros",
    "section": "Contacto",
    "text": "Contacto\nSi tienes preguntas, comentarios o sugerencias, no dudes en ponerte en contacto con nosotros a través de nuestro correo electrónico o redes sociales.\n¡Esperamos que disfrutes aprendiendo con nosotros!"
  },
  {
    "objectID": "license.html#uso-permitido",
    "href": "license.html#uso-permitido",
    "title": "Licencia",
    "section": "Uso Permitido",
    "text": "Uso Permitido\nPuedes utilizar el contenido de este curso con fines educativos y personales. Puedes modificar los ejemplos y el código proporcionado para tus propias necesidades de aprendizaje."
  },
  {
    "objectID": "license.html#restricciones",
    "href": "license.html#restricciones",
    "title": "Licencia",
    "section": "Restricciones",
    "text": "Restricciones\nNo tienes permitido redistribuir, vender o utilizar el contenido de este curso para fines comerciales sin el permiso explícito de [Nombre de la Compañía]. Además, no tienes permitido copiar o duplicar el contenido del curso y presentarlo como propio."
  },
  {
    "objectID": "license.html#atribución",
    "href": "license.html#atribución",
    "title": "Licencia",
    "section": "Atribución",
    "text": "Atribución\nSi compartes los ejemplos, los fragmentos de código o el contenido de este curso en línea, te pedimos que proporciones la atribución adecuada a [Nombre de la Compañía]."
  },
  {
    "objectID": "license.html#cambios-en-la-licencia",
    "href": "license.html#cambios-en-la-licencia",
    "title": "Licencia",
    "section": "Cambios en la Licencia",
    "text": "Cambios en la Licencia\n[Nombre de la Compañía] se reserva el derecho de modificar los términos de esta licencia en cualquier momento. Cualquier cambio se reflejará en esta página.\nGracias por respetar nuestros derechos de autor y por tu comprensión."
  },
  {
    "objectID": "unidades/unidad1/unidad1.html",
    "href": "unidades/unidad1/unidad1.html",
    "title": "Módulo 1: Introducción a Django.",
    "section": "",
    "text": "Ejemplo Práctico:"
  },
  {
    "objectID": "unidades/unidad1/unidad1.html#qué-es-django-y-por-qué-utilizarlo",
    "href": "unidades/unidad1/unidad1.html#qué-es-django-y-por-qué-utilizarlo",
    "title": "Módulo 1: Introducción a Django.",
    "section": "¿Qué es Django y por qué utilizarlo?",
    "text": "¿Qué es Django y por qué utilizarlo?\n\nDjango es un framework web de alto nivel basado en Python.\nFacilita el desarrollo rápido de aplicaciones web robustas y seguras.\nVentajas de Django: MVC (Modelo-Vista-Controlador), administrador de base de datos, seguridad integrada y comunidad activa."
  },
  {
    "objectID": "unidades/unidad1/unidad1.html#mvc-vs-mtv.",
    "href": "unidades/unidad1/unidad1.html#mvc-vs-mtv.",
    "title": "Módulo 1: Introducción a Django.",
    "section": "MVC vs MTV.",
    "text": "MVC vs MTV."
  },
  {
    "objectID": "unidades/unidad1/unidad1.html#instalación-de-django-4.2.3-y-configuración-del-entorno-de-desarrollo",
    "href": "unidades/unidad1/unidad1.html#instalación-de-django-4.2.3-y-configuración-del-entorno-de-desarrollo",
    "title": "Módulo 1: Introducción a Django.",
    "section": "Instalación de Django 4.2.3 y Configuración del Entorno de Desarrollo",
    "text": "Instalación de Django 4.2.3 y Configuración del Entorno de Desarrollo\nPara instalar Django 4.2.3, se recomienda utilizar un entorno virtual (por ejemplo, con virtualenv o conda).\nComandos para instalar Django y crear un entorno virtual:\n# Instalación de virtualenv\n\npip install virtualenv\n\n# Creación del entorno virtual\n\npython -m venv env\n\n# Activación del Entorno Virtual\n\ncd env/Scripts\nactivate\n\n# Salir del directorio Scripts\ncd ../../\n\n# Instalación de Django usando pip\npip install django==4.2.3"
  },
  {
    "objectID": "unidades/unidad1/unidad1.html#creación-de-un-proyecto-en-django.",
    "href": "unidades/unidad1/unidad1.html#creación-de-un-proyecto-en-django.",
    "title": "Módulo 1: Introducción a Django.",
    "section": "Creación de un Proyecto en Django.",
    "text": "Creación de un Proyecto en Django.\nPara crear un nuevo proyecto Django, utilizamos el comando\ndjango-admin startproject nombre_proyecto .\n\nEstructura de directorios generada:\nnombre_proyecto/\n    manage.py\n        __init__.py\n        settings.py\n        urls.py\n        asgi.py\n        wsgi.py\n\n\nEstructura de Directorios de un Proyecto Django.\nLa estructura de directorios de un proyecto Django se organiza de la siguiente manera:\n\nnombre_proyecto/\n│   manage.py\n│\n└───nombre_proyecto/\n│   │   __init__.py\n│   │   settings.py\n│   │   urls.py\n│   │   asgi.py\n│   │   wsgi.py\n│\n└───otras_aplicaciones/\n    │   ...\n\n\n\n\n\n\n\nDirectorio y/o Archivo\nDescripción\n\n\n\n\nnomb re_proyecto/\nEs el directorio raíz del proyecto. Contiene el archivo “manage.py”, que es una herramienta para administrar el proyecto y ejecutar comandos de Django.\n\n\n\n*nombre_proyec to/nomb re_proyecto/**\n\nEs el directorio de la configuración del proyecto. Contiene varios archivos esenciales:\n\n\ninit.py\nEste archivo indica a Python que el directorio es un paquete y permite la importación de módulos dentro de él.\n\n\n\n*settings.py**\n\nAquí se encuentran todas las configuraciones del proyecto, como bases de datos, aplicaciones instaladas, rutas de plantillas, configuraciones de seguridad, etc.\n\n\nurls.py\nContiene las configuraciones de las URLs del proyecto, es decir, cómo se manejan las solicitudes y se mapean a las vistas.\n\n\nasgi.py y wsgi.py\nSon archivos de configuración para el servidor ASGI (Asynchronous Server Gateway Interface) y WSGI (Web Server Gateway Interface), respectivamente. Estos archivos son utilizados por servidores web para servir la aplicación Django.\n\n\notras_a plicaciones/\nEs un directorio opcional donde puedes organizar las aplicaciones adicionales que desarrolles para el proyecto. Cada aplicación puede tener su propia estructura de directorios."
  },
  {
    "objectID": "unidades/unidad1/unidad1.html#creación-de-una-aplicación-en-django",
    "href": "unidades/unidad1/unidad1.html#creación-de-una-aplicación-en-django",
    "title": "Módulo 1: Introducción a Django.",
    "section": "Creación de una Aplicación en Django",
    "text": "Creación de una Aplicación en Django\nUna aplicación es un componente reutilizable de un proyecto Django. Comando para crear una nueva aplicación:\npython manage.py startapp nombre_app\nEstructura de directorios de una aplicación:\nnombre_app/\n│   migrations/\n│   │   ...\n│   │   __init__.py\n│   │\n│   │   admin.py\n│   │   apps.py\n│   │   models.py\n│   │   tests.py\n│   │   views.py\n\n\n\n\n\n\n\nD irectorio y/o Archivo\nDescripción\n\n\n\n\nn ombre_app\nEs el directorio raíz de la aplicación. Contiene los archivos esenciales y directorios para el funcionamiento de la aplicación.\n\n\nmi grations/\nEs un directorio generado automáticamente por Django cuando se realizan cambios en los modelos de la aplicación. Contiene archivos de migración que representan los cambios en la base de datos.\n\n\ninit.py\nEste archivo indica a Python que el directorio es un paquete y permite la importación de módulos dentro de él.\n\n\nadmin.py\nEn este archivo se pueden registrar los modelos de la aplicación para que aparezcan en el panel de administración de Django.\n\n\napps.py\nEs el archivo donde se define la configuración de la aplicación, como su nombre y configuraciones adicionales.\n\n\nmodels.py\nAquí se definen los modelos de la aplicación utilizando la clase “Model” de Django. Los modelos representan las tablas en la base de datos y definen los campos y relaciones de la aplicación.\n\n\ntests.py\nEs el archivo donde se pueden escribir pruebas unitarias y de integración para la aplicación.\n\n\nviews.py\nContiene las vistas de la aplicación, que son funciones o clases que manejan las solicitudes y generan las respuestas. Las vistas determinan qué se muestra en las páginas web de la aplicación."
  },
  {
    "objectID": "unidades/unidad1/unidad1.html#creación-de-un-proyecto-de-e-commerce-en-django",
    "href": "unidades/unidad1/unidad1.html#creación-de-un-proyecto-de-e-commerce-en-django",
    "title": "Módulo 1: Introducción a Django.",
    "section": "Creación de un Proyecto de E-commerce en Django",
    "text": "Creación de un Proyecto de E-commerce en Django\nEn esta actividad práctica, crearás un nuevo proyecto de e-commerce en Django desde cero. Asegúrate de tener Django instalado en tu entorno de desarrollo antes de comenzar.\nPaso 1: Crear un Proyecto de Django\nAbre una terminal o línea de comandos en la ubicación donde desees crear tu proyecto de e-commerce.\nEjecuta el siguiente comando para crear un nuevo proyecto Django llamado “mi_ecommerce”:\ndjango-admin startproject mi_ecommerce\nVerás que se ha creado un nuevo directorio llamado “mi_ecommerce” que contiene la estructura inicial del proyecto.\nPaso 2: Crear una Aplicación para el E-commerce\nCambia al directorio recién creado “mi_ecommerce”:\ncd mi_ecommerce\nAhora, crea una nueva aplicación llamada “ecommerce” utilizando el siguiente comando:\npython manage.py startapp ecommerce\nSe creará un nuevo directorio “ecommerce” dentro de tu proyecto, que contendrá todos los archivos necesarios para la aplicación.\nPaso 3: Configurar el Proyecto y la Aplicación\nAbre el archivo “settings.py” ubicado en el directorio “mi_ecommerce/mi_ecommerce”.\nAsegúrate de agregar la aplicación “ecommerce” en la lista de “INSTALLED_APPS” para que Django la reconozca:\nINSTALLED_APPS = [\n    # Otras aplicaciones...\n    'ecommerce',\n]\nPaso 4: Ejecutar el Servidor de Desarrollo\nAhora, ejecuta el servidor de desarrollo para ver el proyecto en acción:\npython manage.py runserver\nAbre tu navegador y visita la dirección “http://localhost:8000/”. Deberías ver la página de bienvenida de Django.\nSi has llegado a este punto, ¡Felicidades! Has creado con éxito un nuevo proyecto de e-commerce en Django y una aplicación llamada “ecommerce”. Ahora puedes comenzar a desarrollar las funcionalidades del e-commerce y diseñar las diapositivas para cada uno de los módulos del curso.\n¡Buena suerte!"
  },
  {
    "objectID": "unidades/unidad1/unidad1.html#creación-de-un-blog",
    "href": "unidades/unidad1/unidad1.html#creación-de-un-blog",
    "title": "Módulo 1: Introducción a Django.",
    "section": "Creación de Un Blog",
    "text": "Creación de Un Blog\nEn esta actividad práctica, crearás un nuevo proyecto de Blog en Django desde cero. Asegúrate de tener Django instalado en tu entorno de desarrollo antes de comenzar.\n\nIniciar un Repositorio\nCrear el entorno virtual\nActivación del entorno virtual\nInstalación de Django\nCrear el archivo requirements.txt\nAgregar el archivo .gitignore\nCrear un Proyecto con Django\nCrear la App dentro del Proyecto\nAgregar la App al Archivo settings.py del Proyecto\nCorrer el Servidor de Pruebas"
  },
  {
    "objectID": "unidades/unidad1/unidad1.html#resolución-de-la-actividad-práctica",
    "href": "unidades/unidad1/unidad1.html#resolución-de-la-actividad-práctica",
    "title": "Módulo 1: Introducción a Django.",
    "section": "Resolución de la Actividad Práctica:",
    "text": "Resolución de la Actividad Práctica:\nPara crear el proyecto de Blog en Django y completar las actividades prácticas, sigue los siguientes pasos:\nPaso 1: Iniciar un Repositorio\nInicia un nuevo repositorio en tu sistema de control de versiones (por ejemplo, en GitHub) para gestionar el código de tu proyecto.\nPaso 2: Crear el Entorno Virtual\nCrea un nuevo entorno virtual para aislar las dependencias del proyecto y evitar conflictos con otras aplicaciones Python instaladas en tu sistema.\n# Ejecutar en la terminal o consola\npython -m venv mi_entorno_virtual\nPaso 3: Activación del Entorno Virtual\nActiva el entorno virtual antes de instalar Django o trabajar en el proyecto.\n# En Windows\nmi_entorno_virtual\\Scripts\\activate\n\n# En macOS o Linux\nsource mi_entorno_virtual/bin/activate\nPaso 4: Instalación de Django\nDentro del entorno virtual, instala Django utilizando pip.\n# Ejecutar en la terminal o consola\npip install django\nPaso 5: Crear el Archivo requirements.txt\nCrea un archivo “requirements.txt” en la raíz del proyecto para almacenar todas las dependencias de Python utilizadas en el proyecto.\n# requirements.txt\nDjango==4.2.3\nPaso 6: Agregar el Archivo .gitignore\nCrea un archivo “.gitignore” en la raíz del proyecto para evitar que los archivos y directorios innecesarios se incluyan en el repositorio.\n# .gitignore\nmi_entorno_virtual/\n__pycache__/\n*.pyc\ndb.sqlite3\nPaso 7: Crear un Proyecto con Django\nCrea un nuevo proyecto de Django llamado “mi_blog”.\n# Ejecutar en la terminal o consola\ndjango-admin startproject mi_blog\nPaso 8: Crear la App dentro del Proyecto\nCrea una nueva aplicación llamada “blog” dentro del proyecto “mi_blog”.\n# Ejecutar en la terminal o consola\ncd mi_blog\npython manage.py startapp blog\nPaso 9: Agregar la App al Archivo settings.py del Proyecto\nAbre el archivo “settings.py” en la carpeta “mi_blog” y agrega la aplicación “blog” a la lista de aplicaciones instaladas.\n# settings.py\n\nINSTALLED_APPS = [\n    ...\n    'blog',\n]\nPaso 10: Correr el Servidor de Pruebas\nPara verificar que todo está configurado correctamente, inicia el servidor de pruebas de Django.\n# Ejecutar en la terminal o consola\npython manage.py runserver\nAhora podrás acceder a la página de inicio de Django en tu navegador web en la dirección “http://127.0.0.1:8000/”.\nCon estos pasos, has creado un nuevo proyecto de Blog en Django, configurado un entorno virtual, instalado Django y creado una nueva aplicación dentro del proyecto. Ahora estás listo para comenzar a desarrollar tu blog utilizando Django."
  }
]